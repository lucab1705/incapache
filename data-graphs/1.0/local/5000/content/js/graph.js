/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 3371.0, "series": [{"data": [[0.0, 4.0], [0.1, 5.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 7.0], [0.7, 7.0], [0.8, 7.0], [0.9, 7.0], [1.0, 7.0], [1.1, 7.0], [1.2, 7.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 10.0], [8.6, 10.0], [8.7, 10.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 11.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 11.0], [15.1, 11.0], [15.2, 11.0], [15.3, 11.0], [15.4, 11.0], [15.5, 11.0], [15.6, 11.0], [15.7, 11.0], [15.8, 11.0], [15.9, 11.0], [16.0, 11.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 12.0], [20.4, 12.0], [20.5, 12.0], [20.6, 12.0], [20.7, 12.0], [20.8, 12.0], [20.9, 12.0], [21.0, 12.0], [21.1, 12.0], [21.2, 12.0], [21.3, 12.0], [21.4, 12.0], [21.5, 12.0], [21.6, 12.0], [21.7, 12.0], [21.8, 12.0], [21.9, 12.0], [22.0, 12.0], [22.1, 12.0], [22.2, 12.0], [22.3, 12.0], [22.4, 12.0], [22.5, 12.0], [22.6, 12.0], [22.7, 12.0], [22.8, 12.0], [22.9, 12.0], [23.0, 12.0], [23.1, 12.0], [23.2, 12.0], [23.3, 12.0], [23.4, 12.0], [23.5, 12.0], [23.6, 12.0], [23.7, 12.0], [23.8, 12.0], [23.9, 12.0], [24.0, 12.0], [24.1, 12.0], [24.2, 12.0], [24.3, 12.0], [24.4, 12.0], [24.5, 12.0], [24.6, 12.0], [24.7, 12.0], [24.8, 12.0], [24.9, 12.0], [25.0, 12.0], [25.1, 12.0], [25.2, 12.0], [25.3, 12.0], [25.4, 12.0], [25.5, 12.0], [25.6, 12.0], [25.7, 12.0], [25.8, 12.0], [25.9, 12.0], [26.0, 12.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 13.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 13.0], [27.2, 13.0], [27.3, 13.0], [27.4, 13.0], [27.5, 13.0], [27.6, 13.0], [27.7, 13.0], [27.8, 13.0], [27.9, 13.0], [28.0, 13.0], [28.1, 13.0], [28.2, 13.0], [28.3, 13.0], [28.4, 13.0], [28.5, 13.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 13.0], [30.6, 13.0], [30.7, 13.0], [30.8, 13.0], [30.9, 13.0], [31.0, 13.0], [31.1, 13.0], [31.2, 13.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 13.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 13.0], [35.0, 13.0], [35.1, 13.0], [35.2, 13.0], [35.3, 13.0], [35.4, 13.0], [35.5, 13.0], [35.6, 13.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 14.0], [43.3, 14.0], [43.4, 14.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 14.0], [44.4, 14.0], [44.5, 14.0], [44.6, 14.0], [44.7, 14.0], [44.8, 14.0], [44.9, 14.0], [45.0, 14.0], [45.1, 14.0], [45.2, 14.0], [45.3, 14.0], [45.4, 14.0], [45.5, 14.0], [45.6, 14.0], [45.7, 14.0], [45.8, 14.0], [45.9, 14.0], [46.0, 14.0], [46.1, 14.0], [46.2, 14.0], [46.3, 14.0], [46.4, 14.0], [46.5, 14.0], [46.6, 14.0], [46.7, 14.0], [46.8, 15.0], [46.9, 15.0], [47.0, 15.0], [47.1, 15.0], [47.2, 15.0], [47.3, 15.0], [47.4, 15.0], [47.5, 15.0], [47.6, 15.0], [47.7, 15.0], [47.8, 15.0], [47.9, 15.0], [48.0, 15.0], [48.1, 15.0], [48.2, 15.0], [48.3, 15.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 15.0], [48.8, 15.0], [48.9, 15.0], [49.0, 15.0], [49.1, 15.0], [49.2, 15.0], [49.3, 15.0], [49.4, 15.0], [49.5, 15.0], [49.6, 15.0], [49.7, 15.0], [49.8, 15.0], [49.9, 15.0], [50.0, 15.0], [50.1, 15.0], [50.2, 15.0], [50.3, 15.0], [50.4, 15.0], [50.5, 15.0], [50.6, 15.0], [50.7, 15.0], [50.8, 15.0], [50.9, 15.0], [51.0, 15.0], [51.1, 15.0], [51.2, 15.0], [51.3, 15.0], [51.4, 15.0], [51.5, 15.0], [51.6, 15.0], [51.7, 15.0], [51.8, 15.0], [51.9, 15.0], [52.0, 15.0], [52.1, 15.0], [52.2, 15.0], [52.3, 15.0], [52.4, 15.0], [52.5, 15.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 16.0], [54.0, 16.0], [54.1, 16.0], [54.2, 16.0], [54.3, 16.0], [54.4, 16.0], [54.5, 16.0], [54.6, 16.0], [54.7, 16.0], [54.8, 16.0], [54.9, 16.0], [55.0, 16.0], [55.1, 16.0], [55.2, 16.0], [55.3, 16.0], [55.4, 16.0], [55.5, 16.0], [55.6, 16.0], [55.7, 16.0], [55.8, 16.0], [55.9, 16.0], [56.0, 16.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 18.0], [57.9, 18.0], [58.0, 18.0], [58.1, 18.0], [58.2, 18.0], [58.3, 18.0], [58.4, 19.0], [58.5, 19.0], [58.6, 19.0], [58.7, 19.0], [58.8, 20.0], [58.9, 20.0], [59.0, 20.0], [59.1, 21.0], [59.2, 21.0], [59.3, 22.0], [59.4, 23.0], [59.5, 25.0], [59.6, 26.0], [59.7, 28.0], [59.8, 29.0], [59.9, 30.0], [60.0, 40.0], [60.1, 42.0], [60.2, 44.0], [60.3, 207.0], [60.4, 208.0], [60.5, 209.0], [60.6, 209.0], [60.7, 209.0], [60.8, 210.0], [60.9, 210.0], [61.0, 210.0], [61.1, 211.0], [61.2, 211.0], [61.3, 211.0], [61.4, 211.0], [61.5, 212.0], [61.6, 212.0], [61.7, 212.0], [61.8, 212.0], [61.9, 212.0], [62.0, 212.0], [62.1, 212.0], [62.2, 212.0], [62.3, 213.0], [62.4, 213.0], [62.5, 213.0], [62.6, 213.0], [62.7, 213.0], [62.8, 213.0], [62.9, 213.0], [63.0, 213.0], [63.1, 214.0], [63.2, 214.0], [63.3, 214.0], [63.4, 214.0], [63.5, 214.0], [63.6, 214.0], [63.7, 214.0], [63.8, 214.0], [63.9, 214.0], [64.0, 214.0], [64.1, 215.0], [64.2, 215.0], [64.3, 215.0], [64.4, 215.0], [64.5, 215.0], [64.6, 215.0], [64.7, 215.0], [64.8, 215.0], [64.9, 215.0], [65.0, 215.0], [65.1, 216.0], [65.2, 216.0], [65.3, 216.0], [65.4, 216.0], [65.5, 216.0], [65.6, 216.0], [65.7, 216.0], [65.8, 216.0], [65.9, 216.0], [66.0, 216.0], [66.1, 217.0], [66.2, 217.0], [66.3, 217.0], [66.4, 217.0], [66.5, 217.0], [66.6, 217.0], [66.7, 217.0], [66.8, 217.0], [66.9, 217.0], [67.0, 218.0], [67.1, 218.0], [67.2, 218.0], [67.3, 218.0], [67.4, 218.0], [67.5, 218.0], [67.6, 218.0], [67.7, 218.0], [67.8, 218.0], [67.9, 218.0], [68.0, 219.0], [68.1, 219.0], [68.2, 219.0], [68.3, 219.0], [68.4, 219.0], [68.5, 219.0], [68.6, 219.0], [68.7, 220.0], [68.8, 220.0], [68.9, 220.0], [69.0, 220.0], [69.1, 220.0], [69.2, 220.0], [69.3, 221.0], [69.4, 221.0], [69.5, 221.0], [69.6, 221.0], [69.7, 221.0], [69.8, 221.0], [69.9, 222.0], [70.0, 222.0], [70.1, 222.0], [70.2, 222.0], [70.3, 222.0], [70.4, 223.0], [70.5, 223.0], [70.6, 223.0], [70.7, 223.0], [70.8, 223.0], [70.9, 224.0], [71.0, 224.0], [71.1, 224.0], [71.2, 225.0], [71.3, 225.0], [71.4, 225.0], [71.5, 226.0], [71.6, 226.0], [71.7, 226.0], [71.8, 226.0], [71.9, 227.0], [72.0, 227.0], [72.1, 228.0], [72.2, 228.0], [72.3, 230.0], [72.4, 233.0], [72.5, 246.0], [72.6, 254.0], [72.7, 413.0], [72.8, 415.0], [72.9, 415.0], [73.0, 416.0], [73.1, 417.0], [73.2, 417.0], [73.3, 417.0], [73.4, 417.0], [73.5, 417.0], [73.6, 418.0], [73.7, 418.0], [73.8, 419.0], [73.9, 419.0], [74.0, 419.0], [74.1, 419.0], [74.2, 420.0], [74.3, 420.0], [74.4, 420.0], [74.5, 421.0], [74.6, 421.0], [74.7, 422.0], [74.8, 423.0], [74.9, 423.0], [75.0, 423.0], [75.1, 424.0], [75.2, 424.0], [75.3, 425.0], [75.4, 425.0], [75.5, 425.0], [75.6, 426.0], [75.7, 426.0], [75.8, 427.0], [75.9, 428.0], [76.0, 428.0], [76.1, 429.0], [76.2, 429.0], [76.3, 430.0], [76.4, 430.0], [76.5, 431.0], [76.6, 431.0], [76.7, 432.0], [76.8, 432.0], [76.9, 434.0], [77.0, 436.0], [77.1, 442.0], [77.2, 824.0], [77.3, 827.0], [77.4, 829.0], [77.5, 830.0], [77.6, 832.0], [77.7, 836.0], [77.8, 837.0], [77.9, 839.0], [78.0, 840.0], [78.1, 842.0], [78.2, 844.0], [78.3, 845.0], [78.4, 847.0], [78.5, 849.0], [78.6, 850.0], [78.7, 852.0], [78.8, 857.0], [78.9, 859.0], [79.0, 861.0], [79.1, 867.0], [79.2, 870.0], [79.3, 879.0], [79.4, 888.0], [79.5, 1009.0], [79.6, 1012.0], [79.7, 1013.0], [79.8, 1014.0], [79.9, 1015.0], [80.0, 1015.0], [80.1, 1016.0], [80.2, 1017.0], [80.3, 1017.0], [80.4, 1018.0], [80.5, 1018.0], [80.6, 1019.0], [80.7, 1019.0], [80.8, 1019.0], [80.9, 1020.0], [81.0, 1020.0], [81.1, 1020.0], [81.2, 1021.0], [81.3, 1021.0], [81.4, 1022.0], [81.5, 1023.0], [81.6, 1024.0], [81.7, 1024.0], [81.8, 1025.0], [81.9, 1025.0], [82.0, 1026.0], [82.1, 1026.0], [82.2, 1027.0], [82.3, 1027.0], [82.4, 1028.0], [82.5, 1028.0], [82.6, 1029.0], [82.7, 1029.0], [82.8, 1029.0], [82.9, 1030.0], [83.0, 1030.0], [83.1, 1030.0], [83.2, 1031.0], [83.3, 1031.0], [83.4, 1031.0], [83.5, 1032.0], [83.6, 1032.0], [83.7, 1033.0], [83.8, 1033.0], [83.9, 1033.0], [84.0, 1033.0], [84.1, 1034.0], [84.2, 1034.0], [84.3, 1034.0], [84.4, 1035.0], [84.5, 1035.0], [84.6, 1035.0], [84.7, 1036.0], [84.8, 1036.0], [84.9, 1037.0], [85.0, 1037.0], [85.1, 1037.0], [85.2, 1038.0], [85.3, 1038.0], [85.4, 1038.0], [85.5, 1039.0], [85.6, 1039.0], [85.7, 1039.0], [85.8, 1039.0], [85.9, 1040.0], [86.0, 1040.0], [86.1, 1040.0], [86.2, 1041.0], [86.3, 1041.0], [86.4, 1042.0], [86.5, 1042.0], [86.6, 1043.0], [86.7, 1043.0], [86.8, 1044.0], [86.9, 1044.0], [87.0, 1045.0], [87.1, 1045.0], [87.2, 1045.0], [87.3, 1045.0], [87.4, 1046.0], [87.5, 1047.0], [87.6, 1047.0], [87.7, 1048.0], [87.8, 1048.0], [87.9, 1049.0], [88.0, 1049.0], [88.1, 1050.0], [88.2, 1050.0], [88.3, 1051.0], [88.4, 1052.0], [88.5, 1053.0], [88.6, 1053.0], [88.7, 1055.0], [88.8, 1056.0], [88.9, 1056.0], [89.0, 1058.0], [89.1, 1060.0], [89.2, 1062.0], [89.3, 1064.0], [89.4, 1065.0], [89.5, 1067.0], [89.6, 1070.0], [89.7, 1074.0], [89.8, 1077.0], [89.9, 1221.0], [90.0, 1224.0], [90.1, 1226.0], [90.2, 1230.0], [90.3, 1232.0], [90.4, 1234.0], [90.5, 1235.0], [90.6, 1237.0], [90.7, 1238.0], [90.8, 1239.0], [90.9, 1240.0], [91.0, 1241.0], [91.1, 1242.0], [91.2, 1245.0], [91.3, 1247.0], [91.4, 1248.0], [91.5, 1248.0], [91.6, 1249.0], [91.7, 1250.0], [91.8, 1251.0], [91.9, 1253.0], [92.0, 1254.0], [92.1, 1256.0], [92.2, 1269.0], [92.3, 1276.0], [92.4, 1296.0], [92.5, 1315.0], [92.6, 1430.0], [92.7, 1443.0], [92.8, 1451.0], [92.9, 1455.0], [93.0, 1459.0], [93.1, 1465.0], [93.2, 1648.0], [93.3, 1656.0], [93.4, 1659.0], [93.5, 1668.0], [93.6, 1673.0], [93.7, 1676.0], [93.8, 1678.0], [93.9, 1683.0], [94.0, 1694.0], [94.1, 1700.0], [94.2, 1703.0], [94.3, 1722.0], [94.4, 1728.0], [94.5, 1742.0], [94.6, 1755.0], [94.7, 1843.0], [94.8, 1856.0], [94.9, 1863.0], [95.0, 1868.0], [95.1, 1873.0], [95.2, 1894.0], [95.3, 2672.0], [95.4, 3023.0], [95.5, 3028.0], [95.6, 3032.0], [95.7, 3034.0], [95.8, 3035.0], [95.9, 3036.0], [96.0, 3037.0], [96.1, 3038.0], [96.2, 3038.0], [96.3, 3039.0], [96.4, 3040.0], [96.5, 3041.0], [96.6, 3041.0], [96.7, 3042.0], [96.8, 3043.0], [96.9, 3043.0], [97.0, 3044.0], [97.1, 3044.0], [97.2, 3045.0], [97.3, 3045.0], [97.4, 3046.0], [97.5, 3047.0], [97.6, 3047.0], [97.7, 3048.0], [97.8, 3048.0], [97.9, 3049.0], [98.0, 3049.0], [98.1, 3049.0], [98.2, 3050.0], [98.3, 3050.0], [98.4, 3050.0], [98.5, 3051.0], [98.6, 3051.0], [98.7, 3052.0], [98.8, 3052.0], [98.9, 3053.0], [99.0, 3053.0], [99.1, 3054.0], [99.2, 3055.0], [99.3, 3055.0], [99.4, 3055.0], [99.5, 3056.0], [99.6, 3057.0], [99.7, 3059.0], [99.8, 3237.0], [99.9, 3292.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 3013.0, "series": [{"data": [[0.0, 3013.0], [2600.0, 5.0], [3000.0, 219.0], [200.0, 617.0], [800.0, 114.0], [3200.0, 8.0], [3300.0, 3.0], [1000.0, 521.0], [1200.0, 131.0], [1300.0, 6.0], [1400.0, 31.0], [400.0, 226.0], [1600.0, 44.0], [1700.0, 27.0], [1800.0, 32.0], [1900.0, 3.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 341.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3856.0, "series": [{"data": [[0.0, 3856.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 803.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 341.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 660.1557999999995, "minX": 1.60925244E12, "maxY": 660.1557999999995, "series": [{"data": [[1.60925244E12, 660.1557999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60925244E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "maxY": 3127.75, "series": [{"data": [[3.0, 1223.4], [4.0, 8.0], [6.0, 3043.0], [7.0, 1025.0], [8.0, 8.5], [9.0, 8.0], [11.0, 1359.3333333333333], [12.0, 9.5], [13.0, 7.727272727272727], [14.0, 1531.0], [15.0, 7.0], [16.0, 684.1111111111111], [17.0, 5.0], [18.0, 7.0], [20.0, 7.874999999999999], [21.0, 3046.0], [23.0, 1225.8], [24.0, 5.5], [26.0, 6.0], [27.0, 2029.5], [28.0, 8.0], [29.0, 8.0], [30.0, 10.571428571428571], [31.0, 3047.75], [32.0, 617.2], [33.0, 13.0], [35.0, 10.5], [34.0, 1526.5], [37.0, 922.2], [36.0, 12.625], [38.0, 8.0], [39.0, 1023.8333333333333], [40.0, 12.2], [41.0, 769.375], [44.0, 1523.3333333333333], [46.0, 16.0], [49.0, 2178.5714285714284], [50.0, 16.0], [52.0, 3047.3333333333335], [57.0, 15.75], [56.0, 3034.25], [58.0, 12.666666666666666], [61.0, 1093.642857142857], [60.0, 14.0], [62.0, 13.0], [63.0, 13.428571428571429], [64.0, 1147.75], [66.0, 15.0], [65.0, 777.0], [71.0, 3054.0], [69.0, 3055.0], [68.0, 3052.0], [74.0, 771.5], [73.0, 656.6], [75.0, 766.5], [72.0, 3026.0], [78.0, 12.0], [77.0, 1226.8], [79.0, 10.0], [81.0, 2036.6666666666667], [87.0, 1530.75], [85.0, 2037.5], [84.0, 11.0], [88.0, 12.75], [90.0, 14.0], [89.0, 2165.6666666666665], [92.0, 1836.0], [97.0, 14.75], [96.0, 3050.0], [102.0, 3043.0], [100.0, 3051.25], [107.0, 2537.5], [105.0, 13.0], [108.0, 13.0], [111.0, 3044.5], [114.0, 14.0], [115.0, 3127.75], [119.0, 3046.0], [123.0, 1026.0], [122.0, 1834.4], [127.0, 14.5], [125.0, 14.375], [124.0, 15.166666666666668], [126.0, 3048.0], [128.0, 17.0], [133.0, 1026.0], [131.0, 13.5], [132.0, 3043.5], [130.0, 3043.5], [137.0, 15.0], [136.0, 1835.4], [142.0, 16.0], [141.0, 1834.6], [143.0, 3044.0], [138.0, 3046.0], [145.0, 687.2222222222222], [148.0, 446.1428571428571], [146.0, 15.6], [151.0, 617.8], [150.0, 1524.5], [144.0, 16.0], [149.0, 3036.0], [147.0, 3039.5], [153.0, 742.4444444444445], [152.0, 13.4], [155.0, 1655.75], [154.0, 14.0], [156.0, 3049.0], [161.0, 1910.375], [167.0, 1528.75], [165.0, 3031.0], [162.0, 3045.0], [168.0, 1026.3333333333335], [174.0, 17.0], [173.0, 2286.25], [172.0, 521.1666666666666], [171.0, 1529.5], [177.0, 1751.0], [182.0, 3048.6], [186.0, 13.571428571428571], [185.0, 13.0], [184.0, 14.0], [189.0, 14.5], [191.0, 1106.0], [190.0, 3046.3333333333335], [187.0, 3047.6], [193.0, 1323.2], [194.0, 12.0], [195.0, 2033.6666666666667], [197.0, 13.0], [196.0, 13.0], [199.0, 3049.0], [198.0, 3052.0], [207.0, 13.0], [204.0, 516.6666666666666], [203.0, 1532.3333333333335], [205.0, 12.166666666666666], [206.0, 1223.4], [200.0, 3050.0], [208.0, 372.0], [210.0, 2032.3333333333333], [209.0, 11.666666666666666], [215.0, 11.0], [214.0, 1745.2857142857144], [211.0, 11.0], [216.0, 13.0], [222.0, 1526.75], [223.0, 13.0], [220.0, 3036.0], [219.0, 3049.4], [228.0, 14.2], [224.0, 14.2], [226.0, 2042.0], [225.0, 15.0], [230.0, 2032.3333333333333], [229.0, 13.5], [237.0, 11.0], [235.0, 623.75], [239.0, 1243.0], [238.0, 1242.0], [233.0, 1725.0], [232.0, 3037.5], [243.0, 999.6], [242.0, 12.0], [241.0, 11.5], [247.0, 12.0], [244.0, 12.0], [246.0, 1244.3333333333333], [251.0, 13.0], [250.0, 654.0], [249.0, 11.666666666666666], [255.0, 12.0], [254.0, 309.22222222222223], [252.0, 12.0], [253.0, 963.5], [248.0, 1297.5], [257.0, 593.5], [256.0, 11.0], [258.0, 13.0], [261.0, 11.666666666666666], [260.0, 1310.0], [264.0, 746.1428571428571], [263.0, 12.666666666666668], [265.0, 338.5], [269.0, 13.142857142857142], [271.0, 1044.25], [267.0, 356.33333333333337], [274.0, 15.0], [276.0, 13.25], [275.0, 598.0], [277.0, 12.333333333333334], [279.0, 12.666666666666666], [278.0, 396.625], [280.0, 239.33333333333331], [281.0, 11.857142857142858], [283.0, 1239.0], [282.0, 1026.5], [285.0, 1224.5], [291.0, 12.0], [289.0, 11.333333333333334], [288.0, 1039.6666666666667], [295.0, 625.0], [294.0, 11.5], [292.0, 1036.0], [297.0, 12.5], [296.0, 1029.0], [302.0, 537.0], [300.0, 878.2], [301.0, 15.333333333333334], [298.0, 1236.0], [305.0, 146.78260869565216], [312.0, 127.88888888888889], [310.0, 302.4], [313.0, 158.8571428571429], [315.0, 11.0], [314.0, 521.0], [311.0, 269.25], [309.0, 238.89999999999998], [308.0, 11.0], [306.0, 12.0], [307.0, 264.3333333333333], [316.0, 526.0], [317.0, 1046.0], [318.0, 518.0], [319.0, 1036.0], [304.0, 12.666666666666666], [320.0, 352.6666666666667], [322.0, 458.0], [324.0, 626.25], [323.0, 153.66666666666666], [327.0, 12.5], [326.0, 622.75], [325.0, 13.0], [328.0, 12.444444444444445], [330.0, 1062.0], [333.0, 252.5], [334.0, 803.25], [336.0, 13.0], [351.0, 714.4], [349.0, 13.5], [348.0, 1051.0], [344.0, 1057.3333333333333], [341.0, 1062.5], [340.0, 1045.0], [338.0, 1054.5], [364.0, 594.2857142857143], [354.0, 12.333333333333334], [357.0, 355.0], [356.0, 1041.0], [355.0, 524.75], [358.0, 351.6666666666667], [361.0, 15.0], [359.0, 517.5], [353.0, 1046.0], [352.0, 1701.0], [363.0, 14.0], [366.0, 14.0], [360.0, 1035.0], [365.0, 14.0], [371.0, 15.0], [369.0, 741.2857142857142], [368.0, 13.5], [370.0, 47.166666666666664], [375.0, 14.0], [374.0, 215.33333333333334], [373.0, 1030.5], [377.0, 865.6], [378.0, 521.0], [376.0, 149.0], [380.0, 215.6], [381.0, 514.75], [383.0, 61.416666666666664], [382.0, 62.24999999999999], [396.0, 163.00000000000003], [384.0, 521.0], [385.0, 91.2], [386.0, 114.0], [387.0, 1021.0], [390.0, 11.25], [389.0, 1051.5], [393.0, 434.0], [395.0, 220.33333333333334], [394.0, 225.5], [392.0, 398.2857142857142], [399.0, 10.666666666666666], [398.0, 721.75], [397.0, 218.0], [401.0, 56.8], [402.0, 83.16666666666667], [400.0, 30.0], [407.0, 9.0], [406.0, 16.2], [405.0, 475.0], [408.0, 88.0], [415.0, 10.0], [414.0, 1027.75], [413.0, 1020.0], [404.0, 13.5], [403.0, 488.0], [409.0, 691.0], [411.0, 78.33333333333334], [429.0, 299.2], [416.0, 11.0], [417.0, 12.0], [430.0, 64.0], [428.0, 255.66666666666666], [419.0, 1022.0], [431.0, 48.63636363636363], [425.0, 218.0], [426.0, 115.5], [427.0, 716.0], [423.0, 813.6], [434.0, 81.33333333333333], [432.0, 441.8571428571429], [436.0, 12.222222222222221], [435.0, 115.0], [433.0, 121.66666666666667], [438.0, 42.285714285714285], [437.0, 802.5], [440.0, 217.0], [442.0, 1053.0], [447.0, 1048.8], [451.0, 15.833333333333334], [454.0, 16.0], [452.0, 524.0], [459.0, 16.666666666666668], [456.0, 717.6666666666666], [455.0, 16.0], [450.0, 1041.3333333333333], [460.0, 148.33333333333331], [458.0, 219.0], [461.0, 764.0], [463.0, 12.0], [465.0, 516.75], [467.0, 298.8571428571429], [470.0, 214.2], [469.0, 53.2], [468.0, 319.0], [471.0, 45.833333333333336], [466.0, 13.166666666666668], [464.0, 383.1666666666667], [473.0, 15.333333333333334], [475.0, 216.0], [477.0, 37.50000000000001], [476.0, 824.6], [479.0, 349.0], [472.0, 1026.6666666666667], [478.0, 329.7142857142857], [480.0, 356.5], [486.0, 118.99999999999999], [485.0, 330.8888888888889], [491.0, 176.0], [490.0, 123.0], [494.0, 487.5], [487.0, 379.55555555555554], [483.0, 685.875], [482.0, 114.0], [481.0, 13.0], [492.0, 94.0], [493.0, 13.0], [488.0, 53.5], [495.0, 417.0], [489.0, 425.24999999999994], [499.0, 12.0], [498.0, 149.0], [497.0, 23.75], [501.0, 18.0], [500.0, 1003.75], [503.0, 18.6], [496.0, 841.0], [502.0, 11.0], [504.0, 258.6], [505.0, 1046.25], [510.0, 555.1818181818182], [508.0, 15.5], [507.0, 87.33333333333334], [506.0, 133.4], [514.0, 29.909090909090914], [518.0, 167.5], [524.0, 352.33333333333337], [526.0, 80.66666666666667], [525.0, 12.5], [527.0, 410.75], [523.0, 13.333333333333334], [512.0, 22.0], [513.0, 11.25], [522.0, 61.615384615384606], [521.0, 220.35714285714283], [520.0, 112.93333333333334], [519.0, 281.9], [528.0, 172.88888888888889], [541.0, 1715.0], [538.0, 570.2857142857143], [530.0, 354.0], [532.0, 11.333333333333334], [533.0, 10.666666666666666], [535.0, 10.0], [534.0, 1041.5], [529.0, 286.44444444444446], [517.0, 79.77777777777779], [516.0, 218.2], [515.0, 557.5454545454545], [556.0, 606.8333333333333], [545.0, 10.75], [546.0, 1352.5], [544.0, 1049.25], [552.0, 11.75], [549.0, 11.0], [562.0, 861.5], [567.0, 871.5], [566.0, 14.0], [565.0, 15.0], [561.0, 12.666666666666666], [575.0, 274.5], [572.0, 14.5], [573.0, 13.75], [574.0, 13.4], [571.0, 609.8571428571428], [570.0, 15.0], [569.0, 224.5], [550.0, 1483.5], [554.0, 977.6666666666666], [555.0, 12.2], [558.0, 114.5], [557.0, 733.0], [577.0, 13.0], [576.0, 698.4285714285714], [580.0, 13.0], [579.0, 1262.0], [585.0, 377.75], [584.0, 1709.2], [582.0, 13.0], [588.0, 14.0], [586.0, 14.0], [587.0, 1457.5], [592.0, 15.0], [600.0, 15.0], [602.0, 1172.4], [603.0, 13.75], [605.0, 419.0], [604.0, 12.0], [606.0, 826.75], [601.0, 645.6666666666666], [594.0, 64.0], [593.0, 1035.5], [597.0, 761.6666666666667], [596.0, 13.0], [599.0, 81.83333333333334], [598.0, 114.5], [590.0, 13.0], [589.0, 1045.0], [591.0, 13.0], [633.0, 67.39999999999999], [610.0, 15.333333333333334], [609.0, 14.428571428571429], [613.0, 16.0], [632.0, 216.33333333333334], [614.0, 1199.6666666666667], [634.0, 105.88888888888889], [635.0, 49.0], [639.0, 499.25], [638.0, 27.38461538461539], [637.0, 103.33333333333333], [636.0, 576.1111111111111], [624.0, 71.64285714285715], [628.0, 18.0], [627.0, 337.20000000000005], [625.0, 31.3], [626.0, 15.2], [629.0, 183.26315789473688], [630.0, 99.28571428571428], [631.0, 648.9999999999999], [612.0, 15.8], [608.0, 13.0], [611.0, 1043.5714285714284], [618.0, 215.75], [617.0, 1244.0], [616.0, 1240.0], [619.0, 372.0], [620.0, 76.16666666666666], [621.0, 276.0], [623.0, 348.33333333333337], [622.0, 8.0], [665.0, 385.8], [642.0, 240.625], [650.0, 98.80000000000001], [649.0, 109.27272727272727], [647.0, 13.636363636363637], [664.0, 672.6666666666666], [663.0, 15.666666666666666], [668.0, 223.75], [671.0, 14.0], [657.0, 1255.6666666666667], [656.0, 1048.0], [670.0, 1046.0], [660.0, 642.5], [661.0, 583.8571428571429], [662.0, 14.0], [667.0, 13.666666666666666], [666.0, 18.0], [646.0, 218.66666666666666], [641.0, 405.9], [640.0, 11.777777777777779], [654.0, 13.0], [653.0, 784.0], [652.0, 523.5], [645.0, 29.818181818181813], [648.0, 218.14285714285717], [644.0, 546.2], [643.0, 7.5], [675.0, 195.66666666666669], [684.0, 14.25], [672.0, 424.4], [685.0, 14.0], [686.0, 1419.0], [673.0, 448.625], [674.0, 216.5], [676.0, 46.66666666666667], [677.0, 476.0], [680.0, 271.1666666666667], [679.0, 357.2307692307692], [690.0, 17.0], [689.0, 1033.0], [688.0, 1030.0], [702.0, 119.5], [703.0, 301.6], [698.0, 49.833333333333336], [697.0, 44.5], [699.0, 470.875], [700.0, 308.0], [701.0, 221.0], [696.0, 539.7777777777778], [692.0, 523.1666666666667], [693.0, 289.6666666666667], [694.0, 73.14285714285715], [695.0, 13.5], [678.0, 14.25], [683.0, 150.50000000000003], [681.0, 63.5], [682.0, 387.84615384615387], [709.0, 660.1666666666666], [705.0, 619.7272727272727], [706.0, 57.333333333333336], [704.0, 118.5], [718.0, 9.875], [719.0, 10.5], [708.0, 246.625], [707.0, 13.0], [711.0, 15.333333333333334], [721.0, 10.25], [726.0, 88.0], [725.0, 424.9230769230769], [724.0, 82.55555555555556], [723.0, 17.5], [722.0, 1598.6], [727.0, 190.61538461538464], [720.0, 12.285714285714285], [735.0, 93.0], [734.0, 296.0], [733.0, 153.16666666666666], [731.0, 157.28571428571428], [729.0, 175.2], [728.0, 12.0], [710.0, 11.6], [717.0, 467.5625], [715.0, 48.05882352941176], [716.0, 10.875], [714.0, 35.22222222222222], [713.0, 175.15384615384613], [712.0, 557.7], [737.0, 149.33333333333331], [736.0, 172.0], [748.0, 14.0], [749.0, 420.0], [751.0, 148.33333333333334], [739.0, 172.6], [740.0, 214.0], [744.0, 536.2], [743.0, 413.0], [760.0, 14.0], [764.0, 13.666666666666666], [767.0, 12.0], [766.0, 695.6666666666667], [763.0, 11.5], [762.0, 695.8333333333333], [753.0, 216.2], [757.0, 470.55555555555554], [759.0, 14.5], [758.0, 528.5], [755.0, 13.4], [742.0, 10.5], [747.0, 281.8333333333333], [746.0, 11.75], [745.0, 12.0], [769.0, 694.0], [770.0, 12.833333333333334], [773.0, 484.0], [772.0, 1027.0], [795.0, 728.75], [775.0, 1032.0], [798.0, 419.0], [797.0, 1239.0], [768.0, 521.0], [783.0, 322.0], [778.0, 13.25], [776.0, 150.33333333333334], [779.0, 995.0], [784.0, 12.0], [782.0, 421.5], [789.0, 13.0], [791.0, 633.25], [790.0, 1239.5], [788.0, 12.6], [787.0, 558.3333333333334], [786.0, 12.571428571428571], [785.0, 53.8], [806.0, 142.3], [802.0, 15.0], [805.0, 142.0], [804.0, 318.83333333333337], [817.0, 339.3636363636364], [827.0, 529.0], [829.0, 1241.3333333333333], [828.0, 216.0], [831.0, 12.0], [816.0, 732.0], [830.0, 179.6], [826.0, 487.8333333333333], [825.0, 216.0], [807.0, 1038.0], [820.0, 13.0], [818.0, 14.0], [819.0, 1863.0], [821.0, 558.4444444444445], [823.0, 211.5], [822.0, 372.75], [803.0, 228.0], [809.0, 19.0], [808.0, 396.25], [813.0, 153.33333333333334], [812.0, 1028.25], [815.0, 14.0], [800.0, 215.5], [811.0, 14.0], [810.0, 13.0], [839.0, 117.0], [833.0, 11.0], [832.0, 53.00000000000001], [846.0, 258.0], [844.0, 217.0], [845.0, 149.0], [843.0, 296.6], [834.0, 140.57142857142856], [837.0, 12.0], [838.0, 213.83333333333331], [836.0, 12.0], [841.0, 254.2], [849.0, 12.5], [856.0, 216.0], [858.0, 12.0], [859.0, 220.0], [863.0, 118.12499999999997], [848.0, 287.0], [862.0, 14.0], [860.0, 720.6666666666667], [861.0, 12.5], [857.0, 150.33333333333334], [855.0, 186.14285714285714], [851.0, 355.3333333333333], [842.0, 43.285714285714285], [871.0, 92.6], [865.0, 517.9], [866.0, 14.666666666666666], [867.0, 42.0], [868.0, 352.6], [864.0, 130.9090909090909], [878.0, 10.0], [879.0, 14.0], [882.0, 217.16666666666666], [883.0, 177.39999999999998], [884.0, 94.8], [885.0, 420.0], [886.0, 13.166666666666668], [887.0, 9.666666666666666], [881.0, 117.0], [895.0, 13.0], [880.0, 836.0], [894.0, 249.83333333333334], [893.0, 319.75], [892.0, 1003.4], [891.0, 12.0], [890.0, 245.11111111111111], [889.0, 10.5], [869.0, 456.125], [877.0, 11.666666666666668], [874.0, 195.44444444444446], [875.0, 425.25], [876.0, 77.66666666666667], [872.0, 326.0], [873.0, 76.83333333333334], [870.0, 102.00000000000001], [920.0, 261.5384615384615], [909.0, 66.78947368421052], [899.0, 247.17647058823536], [904.0, 127.375], [903.0, 403.6842105263157], [902.0, 457.5238095238096], [900.0, 587.5], [901.0, 632.6363636363636], [921.0, 242.37500000000003], [923.0, 163.91304347826087], [922.0, 187.0], [925.0, 223.86363636363635], [927.0, 273.9714285714286], [926.0, 260.9473684210526], [924.0, 365.75], [913.0, 247.3809523809524], [914.0, 114.27777777777779], [915.0, 360.1875], [916.0, 346.0], [919.0, 354.73333333333335], [918.0, 318.80000000000007], [917.0, 197.6], [912.0, 125.44444444444444], [907.0, 153.30769230769232], [906.0, 167.35], [910.0, 179.0], [911.0, 95.91666666666667], [898.0, 628.7142857142858], [897.0, 770.0], [896.0, 223.5], [905.0, 407.35714285714283], [908.0, 399.44444444444446], [953.0, 270.6666666666667], [931.0, 119.11999999999998], [928.0, 417.64285714285717], [943.0, 178.87500000000003], [942.0, 415.37499999999994], [941.0, 112.0], [940.0, 96.11764705882354], [932.0, 233.63636363636363], [929.0, 355.20000000000005], [930.0, 185.25], [934.0, 203.16666666666669], [936.0, 414.9047619047619], [938.0, 76.3157894736842], [937.0, 171.3076923076923], [939.0, 299.90476190476187], [935.0, 465.68749999999994], [952.0, 252.7894736842105], [959.0, 12.0], [958.0, 65.0], [957.0, 484.0], [956.0, 12.4], [955.0, 304.07142857142856], [954.0, 80.00000000000001], [944.0, 253.72727272727275], [948.0, 14.571428571428571], [951.0, 263.1052631578948], [950.0, 220.0], [949.0, 217.4], [947.0, 584.0], [946.0, 347.1428571428571], [945.0, 69.25], [933.0, 318.56], [964.0, 11.666666666666666], [960.0, 13.0], [962.0, 12.0], [963.0, 11.25], [961.0, 354.22222222222223], [965.0, 12.0], [967.0, 985.6666666666667], [984.0, 79.33333333333334], [985.0, 216.0], [987.0, 289.625], [986.0, 63.24999999999999], [991.0, 49.81818181818182], [989.0, 501.49999999999994], [990.0, 427.8333333333333], [988.0, 110.83333333333334], [976.0, 14.25], [977.0, 512.2], [979.0, 849.0], [981.0, 16.0], [982.0, 356.3333333333333], [969.0, 13.0], [968.0, 849.3333333333334], [972.0, 318.5], [973.0, 417.8], [974.0, 599.3333333333333], [975.0, 295.6666666666667], [971.0, 239.07142857142856], [970.0, 13.0], [996.0, 596.1428571428572], [1007.0, 493.16666666666663], [992.0, 569.2727272727273], [993.0, 357.0], [994.0, 462.0], [995.0, 12.833333333333334], [997.0, 377.3333333333333], [998.0, 13.666666666666666], [1005.0, 322.5833333333332], [1006.0, 11.6], [1008.0, 380.2], [1016.0, 381.8333333333333], [1017.0, 289.5454545454546], [1020.0, 65.33333333333334], [1023.0, 98.00000000000001], [1022.0, 114.64285714285715], [1021.0, 79.66666666666666], [1018.0, 82.0], [1019.0, 827.6], [1009.0, 14.0], [1011.0, 235.6], [1010.0, 419.0], [1013.0, 419.72727272727275], [1014.0, 268.25], [1015.0, 394.0769230769231], [1012.0, 622.0], [999.0, 199.0909090909091], [1004.0, 158.3846153846154], [1003.0, 188.5], [1002.0, 339.0], [1001.0, 291.64285714285717], [1000.0, 63.49999999999999], [1036.0, 12.0], [1026.0, 91.6], [1024.0, 375.61111111111114], [1054.0, 12.5], [1052.0, 324.0], [1050.0, 352.3333333333333], [1046.0, 520.5], [1044.0, 12.0], [1042.0, 116.83333333333333], [1040.0, 13.0], [1028.0, 774.5], [1030.0, 113.5], [1034.0, 1657.5], [1032.0, 1670.0], [1038.0, 923.8], [1072.0, 252.16666666666666], [1074.0, 464.16666666666663], [1056.0, 428.5], [1086.0, 16.0], [1080.0, 862.9999999999999], [1084.0, 168.0], [1078.0, 9.75], [1076.0, 266.0], [1058.0, 231.3125], [1060.0, 651.1428571428571], [1062.0, 326.78947368421046], [1066.0, 12.833333333333334], [1064.0, 136.0], [1068.0, 222.0], [1070.0, 232.8], [1092.0, 15.0], [1088.0, 16.0], [1029.0, 11.0], [1027.0, 135.6], [1025.0, 28.16666666666667], [1049.0, 13.666666666666666], [1053.0, 119.5], [1055.0, 175.0], [1047.0, 219.0], [1045.0, 450.0], [1041.0, 290.0], [1031.0, 10.5], [1039.0, 427.5], [1075.0, 127.0555555555556], [1081.0, 12.5], [1085.0, 215.0], [1079.0, 12.125], [1077.0, 220.84615384615387], [1057.0, 346.66666666666663], [1061.0, 313.6470588235294], [1059.0, 283.875], [1065.0, 304.2], [1063.0, 350.99999999999994], [1067.0, 521.0], [1073.0, 97.70588235294117], [1071.0, 167.95000000000002], [1069.0, 191.9333333333333], [1035.0, 835.5], [1093.0, 15.333333333333334], [1089.0, 14.0], [1.0, 3046.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[660.1548000000001, 404.8216000000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1093.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10166.666666666666, "minX": 1.60925244E12, "maxY": 97965.16666666667, "series": [{"data": [[1.60925244E12, 97965.16666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.60925244E12, 10166.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60925244E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 404.8216000000003, "minX": 1.60925244E12, "maxY": 404.8216000000003, "series": [{"data": [[1.60925244E12, 404.8216000000003]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60925244E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 404.7846000000002, "minX": 1.60925244E12, "maxY": 404.7846000000002, "series": [{"data": [[1.60925244E12, 404.7846000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60925244E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 287.50019999999995, "minX": 1.60925244E12, "maxY": 287.50019999999995, "series": [{"data": [[1.60925244E12, 287.50019999999995]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60925244E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.60925244E12, "maxY": 3371.0, "series": [{"data": [[1.60925244E12, 3371.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.60925244E12, 1224.9000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.60925244E12, 3053.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.60925244E12, 1868.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.60925244E12, 4.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.60925244E12, 15.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60925244E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 3.0, "maxY": 3048.0, "series": [{"data": [[557.0, 13.0], [2187.0, 14.0], [364.0, 1045.0], [3.0, 3047.0], [200.0, 3048.0], [1689.0, 214.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2187.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 3.0, "maxY": 3048.0, "series": [{"data": [[557.0, 13.0], [2187.0, 14.0], [364.0, 1045.0], [3.0, 3047.0], [200.0, 3048.0], [1689.0, 214.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2187.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.60925244E12, "maxY": 83.33333333333333, "series": [{"data": [[1.60925244E12, 83.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60925244E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.60925244E12, "maxY": 83.33333333333333, "series": [{"data": [[1.60925244E12, 83.33333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.60925244E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.60925244E12, "maxY": 83.33333333333333, "series": [{"data": [[1.60925244E12, 83.33333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60925244E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 83.33333333333333, "minX": 1.60925244E12, "maxY": 83.33333333333333, "series": [{"data": [[1.60925244E12, 83.33333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.60925244E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

