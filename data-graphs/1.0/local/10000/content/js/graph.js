/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 8938.0, "series": [{"data": [[0.0, 6.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 9.0], [1.6, 9.0], [1.7, 9.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 10.0], [3.9, 10.0], [4.0, 10.0], [4.1, 10.0], [4.2, 10.0], [4.3, 10.0], [4.4, 10.0], [4.5, 10.0], [4.6, 10.0], [4.7, 10.0], [4.8, 10.0], [4.9, 10.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 11.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 11.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 11.0], [11.5, 11.0], [11.6, 11.0], [11.7, 11.0], [11.8, 11.0], [11.9, 11.0], [12.0, 11.0], [12.1, 11.0], [12.2, 11.0], [12.3, 11.0], [12.4, 11.0], [12.5, 11.0], [12.6, 11.0], [12.7, 11.0], [12.8, 11.0], [12.9, 11.0], [13.0, 11.0], [13.1, 11.0], [13.2, 11.0], [13.3, 11.0], [13.4, 11.0], [13.5, 11.0], [13.6, 11.0], [13.7, 11.0], [13.8, 11.0], [13.9, 11.0], [14.0, 11.0], [14.1, 11.0], [14.2, 11.0], [14.3, 11.0], [14.4, 11.0], [14.5, 11.0], [14.6, 11.0], [14.7, 11.0], [14.8, 11.0], [14.9, 11.0], [15.0, 12.0], [15.1, 12.0], [15.2, 12.0], [15.3, 12.0], [15.4, 12.0], [15.5, 12.0], [15.6, 12.0], [15.7, 12.0], [15.8, 12.0], [15.9, 12.0], [16.0, 12.0], [16.1, 12.0], [16.2, 12.0], [16.3, 12.0], [16.4, 12.0], [16.5, 12.0], [16.6, 12.0], [16.7, 12.0], [16.8, 12.0], [16.9, 12.0], [17.0, 12.0], [17.1, 12.0], [17.2, 12.0], [17.3, 12.0], [17.4, 12.0], [17.5, 12.0], [17.6, 12.0], [17.7, 12.0], [17.8, 12.0], [17.9, 12.0], [18.0, 12.0], [18.1, 12.0], [18.2, 12.0], [18.3, 12.0], [18.4, 12.0], [18.5, 12.0], [18.6, 12.0], [18.7, 12.0], [18.8, 12.0], [18.9, 12.0], [19.0, 12.0], [19.1, 12.0], [19.2, 12.0], [19.3, 12.0], [19.4, 12.0], [19.5, 12.0], [19.6, 12.0], [19.7, 12.0], [19.8, 12.0], [19.9, 12.0], [20.0, 12.0], [20.1, 12.0], [20.2, 12.0], [20.3, 12.0], [20.4, 12.0], [20.5, 12.0], [20.6, 12.0], [20.7, 12.0], [20.8, 12.0], [20.9, 12.0], [21.0, 12.0], [21.1, 12.0], [21.2, 12.0], [21.3, 12.0], [21.4, 12.0], [21.5, 12.0], [21.6, 12.0], [21.7, 12.0], [21.8, 12.0], [21.9, 12.0], [22.0, 12.0], [22.1, 12.0], [22.2, 12.0], [22.3, 12.0], [22.4, 12.0], [22.5, 12.0], [22.6, 12.0], [22.7, 12.0], [22.8, 12.0], [22.9, 12.0], [23.0, 12.0], [23.1, 12.0], [23.2, 12.0], [23.3, 12.0], [23.4, 12.0], [23.5, 12.0], [23.6, 12.0], [23.7, 12.0], [23.8, 12.0], [23.9, 12.0], [24.0, 12.0], [24.1, 12.0], [24.2, 12.0], [24.3, 13.0], [24.4, 13.0], [24.5, 13.0], [24.6, 13.0], [24.7, 13.0], [24.8, 13.0], [24.9, 13.0], [25.0, 13.0], [25.1, 13.0], [25.2, 13.0], [25.3, 13.0], [25.4, 13.0], [25.5, 13.0], [25.6, 13.0], [25.7, 13.0], [25.8, 13.0], [25.9, 13.0], [26.0, 13.0], [26.1, 13.0], [26.2, 13.0], [26.3, 13.0], [26.4, 13.0], [26.5, 13.0], [26.6, 13.0], [26.7, 13.0], [26.8, 13.0], [26.9, 13.0], [27.0, 13.0], [27.1, 13.0], [27.2, 13.0], [27.3, 13.0], [27.4, 13.0], [27.5, 13.0], [27.6, 13.0], [27.7, 13.0], [27.8, 13.0], [27.9, 13.0], [28.0, 13.0], [28.1, 13.0], [28.2, 13.0], [28.3, 13.0], [28.4, 13.0], [28.5, 13.0], [28.6, 13.0], [28.7, 13.0], [28.8, 13.0], [28.9, 13.0], [29.0, 13.0], [29.1, 13.0], [29.2, 13.0], [29.3, 13.0], [29.4, 13.0], [29.5, 13.0], [29.6, 13.0], [29.7, 13.0], [29.8, 13.0], [29.9, 13.0], [30.0, 13.0], [30.1, 13.0], [30.2, 13.0], [30.3, 13.0], [30.4, 13.0], [30.5, 13.0], [30.6, 13.0], [30.7, 13.0], [30.8, 13.0], [30.9, 13.0], [31.0, 13.0], [31.1, 13.0], [31.2, 13.0], [31.3, 13.0], [31.4, 13.0], [31.5, 13.0], [31.6, 13.0], [31.7, 13.0], [31.8, 13.0], [31.9, 13.0], [32.0, 13.0], [32.1, 13.0], [32.2, 13.0], [32.3, 13.0], [32.4, 13.0], [32.5, 13.0], [32.6, 13.0], [32.7, 13.0], [32.8, 13.0], [32.9, 13.0], [33.0, 13.0], [33.1, 13.0], [33.2, 13.0], [33.3, 13.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 14.0], [34.8, 14.0], [34.9, 14.0], [35.0, 14.0], [35.1, 14.0], [35.2, 14.0], [35.3, 14.0], [35.4, 14.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 14.0], [36.4, 14.0], [36.5, 14.0], [36.6, 14.0], [36.7, 14.0], [36.8, 14.0], [36.9, 14.0], [37.0, 14.0], [37.1, 14.0], [37.2, 14.0], [37.3, 14.0], [37.4, 14.0], [37.5, 14.0], [37.6, 14.0], [37.7, 14.0], [37.8, 14.0], [37.9, 14.0], [38.0, 14.0], [38.1, 14.0], [38.2, 14.0], [38.3, 14.0], [38.4, 14.0], [38.5, 14.0], [38.6, 14.0], [38.7, 14.0], [38.8, 14.0], [38.9, 14.0], [39.0, 14.0], [39.1, 14.0], [39.2, 14.0], [39.3, 14.0], [39.4, 14.0], [39.5, 14.0], [39.6, 14.0], [39.7, 14.0], [39.8, 14.0], [39.9, 14.0], [40.0, 14.0], [40.1, 14.0], [40.2, 14.0], [40.3, 14.0], [40.4, 14.0], [40.5, 14.0], [40.6, 14.0], [40.7, 14.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 15.0], [43.3, 15.0], [43.4, 15.0], [43.5, 15.0], [43.6, 15.0], [43.7, 15.0], [43.8, 15.0], [43.9, 15.0], [44.0, 15.0], [44.1, 15.0], [44.2, 15.0], [44.3, 15.0], [44.4, 15.0], [44.5, 15.0], [44.6, 15.0], [44.7, 15.0], [44.8, 15.0], [44.9, 15.0], [45.0, 15.0], [45.1, 15.0], [45.2, 15.0], [45.3, 15.0], [45.4, 15.0], [45.5, 15.0], [45.6, 15.0], [45.7, 15.0], [45.8, 15.0], [45.9, 15.0], [46.0, 15.0], [46.1, 15.0], [46.2, 15.0], [46.3, 15.0], [46.4, 15.0], [46.5, 15.0], [46.6, 15.0], [46.7, 15.0], [46.8, 15.0], [46.9, 15.0], [47.0, 15.0], [47.1, 15.0], [47.2, 15.0], [47.3, 15.0], [47.4, 15.0], [47.5, 15.0], [47.6, 15.0], [47.7, 15.0], [47.8, 15.0], [47.9, 15.0], [48.0, 15.0], [48.1, 15.0], [48.2, 15.0], [48.3, 16.0], [48.4, 16.0], [48.5, 16.0], [48.6, 16.0], [48.7, 16.0], [48.8, 16.0], [48.9, 16.0], [49.0, 16.0], [49.1, 16.0], [49.2, 16.0], [49.3, 16.0], [49.4, 16.0], [49.5, 16.0], [49.6, 16.0], [49.7, 16.0], [49.8, 16.0], [49.9, 16.0], [50.0, 16.0], [50.1, 16.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 17.0], [51.2, 17.0], [51.3, 17.0], [51.4, 17.0], [51.5, 17.0], [51.6, 17.0], [51.7, 17.0], [51.8, 17.0], [51.9, 17.0], [52.0, 17.0], [52.1, 17.0], [52.2, 17.0], [52.3, 17.0], [52.4, 18.0], [52.5, 18.0], [52.6, 18.0], [52.7, 18.0], [52.8, 18.0], [52.9, 18.0], [53.0, 19.0], [53.1, 19.0], [53.2, 20.0], [53.3, 28.0], [53.4, 35.0], [53.5, 37.0], [53.6, 39.0], [53.7, 40.0], [53.8, 41.0], [53.9, 43.0], [54.0, 43.0], [54.1, 44.0], [54.2, 45.0], [54.3, 46.0], [54.4, 56.0], [54.5, 58.0], [54.6, 61.0], [54.7, 206.0], [54.8, 209.0], [54.9, 210.0], [55.0, 211.0], [55.1, 211.0], [55.2, 211.0], [55.3, 212.0], [55.4, 212.0], [55.5, 212.0], [55.6, 212.0], [55.7, 212.0], [55.8, 213.0], [55.9, 213.0], [56.0, 213.0], [56.1, 213.0], [56.2, 213.0], [56.3, 213.0], [56.4, 214.0], [56.5, 214.0], [56.6, 214.0], [56.7, 214.0], [56.8, 214.0], [56.9, 214.0], [57.0, 214.0], [57.1, 214.0], [57.2, 214.0], [57.3, 214.0], [57.4, 214.0], [57.5, 215.0], [57.6, 215.0], [57.7, 215.0], [57.8, 215.0], [57.9, 215.0], [58.0, 215.0], [58.1, 215.0], [58.2, 215.0], [58.3, 215.0], [58.4, 215.0], [58.5, 215.0], [58.6, 215.0], [58.7, 216.0], [58.8, 216.0], [58.9, 216.0], [59.0, 216.0], [59.1, 216.0], [59.2, 216.0], [59.3, 216.0], [59.4, 216.0], [59.5, 217.0], [59.6, 217.0], [59.7, 217.0], [59.8, 217.0], [59.9, 217.0], [60.0, 217.0], [60.1, 217.0], [60.2, 217.0], [60.3, 218.0], [60.4, 218.0], [60.5, 218.0], [60.6, 218.0], [60.7, 218.0], [60.8, 218.0], [60.9, 218.0], [61.0, 218.0], [61.1, 219.0], [61.2, 219.0], [61.3, 219.0], [61.4, 219.0], [61.5, 219.0], [61.6, 219.0], [61.7, 219.0], [61.8, 219.0], [61.9, 219.0], [62.0, 220.0], [62.1, 220.0], [62.2, 220.0], [62.3, 220.0], [62.4, 220.0], [62.5, 220.0], [62.6, 220.0], [62.7, 221.0], [62.8, 221.0], [62.9, 221.0], [63.0, 221.0], [63.1, 221.0], [63.2, 222.0], [63.3, 222.0], [63.4, 222.0], [63.5, 222.0], [63.6, 222.0], [63.7, 223.0], [63.8, 223.0], [63.9, 223.0], [64.0, 223.0], [64.1, 224.0], [64.2, 224.0], [64.3, 225.0], [64.4, 225.0], [64.5, 226.0], [64.6, 226.0], [64.7, 227.0], [64.8, 229.0], [64.9, 230.0], [65.0, 232.0], [65.1, 234.0], [65.2, 235.0], [65.3, 238.0], [65.4, 240.0], [65.5, 244.0], [65.6, 248.0], [65.7, 257.0], [65.8, 263.0], [65.9, 272.0], [66.0, 282.0], [66.1, 413.0], [66.2, 415.0], [66.3, 416.0], [66.4, 416.0], [66.5, 417.0], [66.6, 417.0], [66.7, 418.0], [66.8, 418.0], [66.9, 418.0], [67.0, 419.0], [67.1, 419.0], [67.2, 420.0], [67.3, 420.0], [67.4, 420.0], [67.5, 421.0], [67.6, 421.0], [67.7, 422.0], [67.8, 422.0], [67.9, 423.0], [68.0, 423.0], [68.1, 424.0], [68.2, 425.0], [68.3, 425.0], [68.4, 426.0], [68.5, 427.0], [68.6, 427.0], [68.7, 428.0], [68.8, 428.0], [68.9, 429.0], [69.0, 429.0], [69.1, 430.0], [69.2, 431.0], [69.3, 432.0], [69.4, 433.0], [69.5, 434.0], [69.6, 435.0], [69.7, 436.0], [69.8, 437.0], [69.9, 438.0], [70.0, 439.0], [70.1, 440.0], [70.2, 441.0], [70.3, 442.0], [70.4, 445.0], [70.5, 446.0], [70.6, 450.0], [70.7, 453.0], [70.8, 460.0], [70.9, 462.0], [71.0, 491.0], [71.1, 512.0], [71.2, 528.0], [71.3, 822.0], [71.4, 825.0], [71.5, 827.0], [71.6, 832.0], [71.7, 834.0], [71.8, 838.0], [71.9, 840.0], [72.0, 842.0], [72.1, 845.0], [72.2, 845.0], [72.3, 847.0], [72.4, 850.0], [72.5, 851.0], [72.6, 852.0], [72.7, 853.0], [72.8, 855.0], [72.9, 860.0], [73.0, 864.0], [73.1, 869.0], [73.2, 872.0], [73.3, 874.0], [73.4, 878.0], [73.5, 882.0], [73.6, 895.0], [73.7, 915.0], [73.8, 964.0], [73.9, 986.0], [74.0, 1009.0], [74.1, 1011.0], [74.2, 1012.0], [74.3, 1012.0], [74.4, 1013.0], [74.5, 1014.0], [74.6, 1014.0], [74.7, 1015.0], [74.8, 1015.0], [74.9, 1016.0], [75.0, 1016.0], [75.1, 1017.0], [75.2, 1017.0], [75.3, 1018.0], [75.4, 1018.0], [75.5, 1019.0], [75.6, 1020.0], [75.7, 1020.0], [75.8, 1021.0], [75.9, 1021.0], [76.0, 1022.0], [76.1, 1023.0], [76.2, 1023.0], [76.3, 1023.0], [76.4, 1024.0], [76.5, 1024.0], [76.6, 1025.0], [76.7, 1026.0], [76.8, 1026.0], [76.9, 1027.0], [77.0, 1027.0], [77.1, 1028.0], [77.2, 1028.0], [77.3, 1028.0], [77.4, 1029.0], [77.5, 1029.0], [77.6, 1029.0], [77.7, 1030.0], [77.8, 1030.0], [77.9, 1031.0], [78.0, 1031.0], [78.1, 1031.0], [78.2, 1032.0], [78.3, 1032.0], [78.4, 1033.0], [78.5, 1033.0], [78.6, 1034.0], [78.7, 1034.0], [78.8, 1034.0], [78.9, 1035.0], [79.0, 1035.0], [79.1, 1036.0], [79.2, 1036.0], [79.3, 1037.0], [79.4, 1037.0], [79.5, 1038.0], [79.6, 1038.0], [79.7, 1039.0], [79.8, 1039.0], [79.9, 1040.0], [80.0, 1040.0], [80.1, 1041.0], [80.2, 1042.0], [80.3, 1042.0], [80.4, 1043.0], [80.5, 1043.0], [80.6, 1044.0], [80.7, 1045.0], [80.8, 1047.0], [80.9, 1051.0], [81.0, 1058.0], [81.1, 1070.0], [81.2, 1087.0], [81.3, 1217.0], [81.4, 1222.0], [81.5, 1225.0], [81.6, 1227.0], [81.7, 1228.0], [81.8, 1229.0], [81.9, 1230.0], [82.0, 1231.0], [82.1, 1232.0], [82.2, 1233.0], [82.3, 1235.0], [82.4, 1235.0], [82.5, 1236.0], [82.6, 1238.0], [82.7, 1239.0], [82.8, 1239.0], [82.9, 1240.0], [83.0, 1241.0], [83.1, 1242.0], [83.2, 1242.0], [83.3, 1244.0], [83.4, 1246.0], [83.5, 1247.0], [83.6, 1248.0], [83.7, 1249.0], [83.8, 1250.0], [83.9, 1251.0], [84.0, 1253.0], [84.1, 1254.0], [84.2, 1257.0], [84.3, 1264.0], [84.4, 1281.0], [84.5, 1425.0], [84.6, 1430.0], [84.7, 1434.0], [84.8, 1437.0], [84.9, 1441.0], [85.0, 1446.0], [85.1, 1449.0], [85.2, 1450.0], [85.3, 1454.0], [85.4, 1457.0], [85.5, 1459.0], [85.6, 1463.0], [85.7, 1466.0], [85.8, 1471.0], [85.9, 1481.0], [86.0, 1653.0], [86.1, 1658.0], [86.2, 1669.0], [86.3, 1676.0], [86.4, 1681.0], [86.5, 1687.0], [86.6, 1693.0], [86.7, 1697.0], [86.8, 1719.0], [86.9, 1796.0], [87.0, 1809.0], [87.1, 1841.0], [87.2, 1851.0], [87.3, 1859.0], [87.4, 1867.0], [87.5, 1877.0], [87.6, 1879.0], [87.7, 1884.0], [87.8, 1892.0], [87.9, 1905.0], [88.0, 1931.0], [88.1, 1952.0], [88.2, 1961.0], [88.3, 1968.0], [88.4, 2678.0], [88.5, 2690.0], [88.6, 2698.0], [88.7, 2710.0], [88.8, 2731.0], [88.9, 2751.0], [89.0, 2757.0], [89.1, 2964.0], [89.2, 2991.0], [89.3, 3026.0], [89.4, 3028.0], [89.5, 3029.0], [89.6, 3030.0], [89.7, 3031.0], [89.8, 3032.0], [89.9, 3033.0], [90.0, 3034.0], [90.1, 3035.0], [90.2, 3036.0], [90.3, 3036.0], [90.4, 3037.0], [90.5, 3037.0], [90.6, 3038.0], [90.7, 3038.0], [90.8, 3039.0], [90.9, 3040.0], [91.0, 3041.0], [91.1, 3041.0], [91.2, 3042.0], [91.3, 3042.0], [91.4, 3043.0], [91.5, 3043.0], [91.6, 3044.0], [91.7, 3044.0], [91.8, 3045.0], [91.9, 3045.0], [92.0, 3046.0], [92.1, 3046.0], [92.2, 3047.0], [92.3, 3047.0], [92.4, 3047.0], [92.5, 3048.0], [92.6, 3049.0], [92.7, 3050.0], [92.8, 3050.0], [92.9, 3051.0], [93.0, 3051.0], [93.1, 3052.0], [93.2, 3052.0], [93.3, 3053.0], [93.4, 3053.0], [93.5, 3054.0], [93.6, 3055.0], [93.7, 3055.0], [93.8, 3056.0], [93.9, 3057.0], [94.0, 3057.0], [94.1, 3058.0], [94.2, 3058.0], [94.3, 3060.0], [94.4, 3061.0], [94.5, 3064.0], [94.6, 3233.0], [94.7, 3236.0], [94.8, 3239.0], [94.9, 3241.0], [95.0, 3243.0], [95.1, 3244.0], [95.2, 3247.0], [95.3, 3249.0], [95.4, 3251.0], [95.5, 3253.0], [95.6, 3254.0], [95.7, 3256.0], [95.8, 3257.0], [95.9, 3259.0], [96.0, 3261.0], [96.1, 3263.0], [96.2, 3265.0], [96.3, 3266.0], [96.4, 3271.0], [96.5, 3305.0], [96.6, 3344.0], [96.7, 3354.0], [96.8, 3428.0], [96.9, 3459.0], [97.0, 3463.0], [97.1, 3471.0], [97.2, 3483.0], [97.3, 3828.0], [97.4, 3872.0], [97.5, 3889.0], [97.6, 3907.0], [97.7, 3920.0], [97.8, 4339.0], [97.9, 4364.0], [98.0, 4458.0], [98.1, 4777.0], [98.2, 4979.0], [98.3, 6665.0], [98.4, 6796.0], [98.5, 7067.0], [98.6, 7082.0], [98.7, 7104.0], [98.8, 7127.0], [98.9, 7144.0], [99.0, 7159.0], [99.1, 7178.0], [99.2, 7193.0], [99.3, 7209.0], [99.4, 7237.0], [99.5, 7261.0], [99.6, 7304.0], [99.7, 7418.0], [99.8, 7464.0], [99.9, 7681.0], [100.0, 8938.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5470.0, "series": [{"data": [[0.0, 5470.0], [800.0, 237.0], [900.0, 35.0], [1000.0, 730.0], [1200.0, 320.0], [1300.0, 1.0], [1400.0, 147.0], [1500.0, 5.0], [1600.0, 75.0], [1700.0, 18.0], [1800.0, 96.0], [1900.0, 46.0], [2000.0, 4.0], [2600.0, 25.0], [2700.0, 45.0], [2800.0, 1.0], [2900.0, 14.0], [3000.0, 532.0], [3200.0, 192.0], [3300.0, 31.0], [3400.0, 44.0], [3600.0, 6.0], [3700.0, 2.0], [3800.0, 25.0], [3900.0, 19.0], [4300.0, 19.0], [4400.0, 8.0], [4700.0, 14.0], [4800.0, 2.0], [4900.0, 7.0], [5000.0, 1.0], [6400.0, 4.0], [6600.0, 9.0], [6700.0, 3.0], [6900.0, 1.0], [6800.0, 4.0], [7100.0, 54.0], [7000.0, 23.0], [7200.0, 36.0], [7300.0, 8.0], [7400.0, 16.0], [7500.0, 5.0], [7600.0, 4.0], [7700.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8900.0, 5.0], [200.0, 1133.0], [400.0, 502.0], [500.0, 18.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1407.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 7106.0, "series": [{"data": [[0.0, 7106.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1487.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1407.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1142.3397999999984, "minX": 1.6092525E12, "maxY": 1142.3397999999984, "series": [{"data": [[1.6092525E12, 1142.3397999999984]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6092525E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.5, "minX": 2.0, "maxY": 8926.0, "series": [{"data": [[2.0, 8926.0], [6.0, 8673.75], [7.0, 7909.0], [8.0, 7304.0], [10.0, 7281.0], [13.0, 7209.666666666667], [18.0, 7204.8], [20.0, 7207.5], [23.0, 7152.333333333333], [27.0, 5718.8], [29.0, 17.0], [30.0, 7120.0], [32.0, 13.666666666666666], [33.0, 4250.0], [35.0, 10.88888888888889], [34.0, 12.666666666666666], [37.0, 1425.0], [36.0, 2373.777777777778], [38.0, 995.2857142857143], [39.0, 15.0], [40.0, 925.1875], [41.0, 1819.5], [42.0, 12.833333333333332], [43.0, 12.666666666666666], [45.0, 10.0], [44.0, 10.0], [47.0, 10.75], [46.0, 5147.428571428572], [48.0, 11.25], [49.0, 8.0], [50.0, 8.0], [51.0, 7174.4], [54.0, 3076.857142857143], [55.0, 7159.0], [57.0, 9.0], [59.0, 9.0], [58.0, 5352.0], [61.0, 7122.0], [62.0, 10.0], [63.0, 3158.6666666666665], [64.0, 11.285714285714286], [67.0, 2363.6666666666665], [66.0, 10.75], [71.0, 3540.5], [69.0, 11.5], [70.0, 11.6], [68.0, 4044.0], [73.0, 3344.0], [72.0, 13.5], [75.0, 3728.5], [74.0, 1871.5], [76.0, 8.0], [81.0, 6573.571428571428], [82.0, 8.0], [80.0, 8.0], [83.0, 7270.0], [85.0, 7257.0], [89.0, 7257.0], [94.0, 12.5], [93.0, 4824.5], [92.0, 12.75], [95.0, 13.4], [96.0, 13.0], [99.0, 14.0], [98.0, 7213.8], [100.0, 2877.2], [101.0, 16.0], [102.0, 14.666666666666666], [103.0, 7427.333333333333], [105.0, 14.666666666666666], [107.0, 4261.0], [106.0, 17.0], [104.0, 15.0], [109.0, 14.0], [108.0, 13.0], [111.0, 13.0], [114.0, 13.0], [113.0, 13.0], [112.0, 6234.666666666666], [115.0, 14.5], [118.0, 14.0], [117.0, 14.333333333333334], [116.0, 4973.0], [119.0, 3732.333333333333], [123.0, 5793.2], [127.0, 16.0], [125.0, 12.285714285714285], [124.0, 14.666666666666666], [126.0, 15.285714285714286], [128.0, 3595.4], [130.0, 15.666666666666666], [135.0, 7310.0], [133.0, 7166.2], [136.0, 14.0], [137.0, 5405.0], [142.0, 1803.25], [143.0, 12.285714285714285], [141.0, 3601.25], [139.0, 2406.1666666666665], [140.0, 13.5], [144.0, 13.0], [146.0, 4093.857142857143], [147.0, 13.2], [145.0, 12.571428571428571], [150.0, 12.5], [149.0, 11.857142857142858], [148.0, 13.0], [151.0, 7122.4], [154.0, 13.0], [153.0, 13.0], [157.0, 14.285714285714285], [158.0, 16.0], [156.0, 3598.3], [155.0, 14.0], [152.0, 14.0], [159.0, 7154.333333333333], [162.0, 13.5], [160.0, 11.0], [165.0, 11.333333333333334], [164.0, 1163.5], [161.0, 11.0], [167.0, 10.0], [163.0, 2746.0], [166.0, 10.0], [171.0, 11.3], [169.0, 10.0], [173.0, 9.5], [170.0, 712.578947368421], [172.0, 1495.2222222222222], [168.0, 2971.5555555555557], [175.0, 836.3636363636364], [174.0, 11.0], [178.0, 13.0], [177.0, 10.833333333333332], [181.0, 10.0], [180.0, 2176.285714285714], [179.0, 10.0], [182.0, 1528.25], [186.0, 3980.666666666667], [185.0, 10.25], [188.0, 2732.25], [187.0, 11.333333333333334], [190.0, 12.333333333333334], [191.0, 12.666666666666668], [189.0, 11.5], [192.0, 1357.5555555555557], [193.0, 11.333333333333334], [198.0, 12.666666666666666], [197.0, 12.0], [199.0, 1310.2857142857142], [196.0, 3041.75], [201.0, 13.0], [205.0, 1226.2], [207.0, 4393.0], [203.0, 3049.5], [208.0, 14.333333333333334], [214.0, 15.0], [212.0, 14.0], [213.0, 4515.333333333333], [210.0, 4519.333333333333], [218.0, 14.0], [219.0, 14.0], [217.0, 2071.75], [216.0, 15.0], [222.0, 4029.0], [228.0, 2309.2], [226.0, 16.0], [225.0, 1528.0], [231.0, 3043.0], [230.0, 3834.0], [224.0, 3872.5], [235.0, 17.5], [233.0, 2047.6666666666667], [236.0, 2024.3333333333333], [239.0, 19.0], [237.0, 3483.0], [234.0, 3042.0], [243.0, 1890.5], [242.0, 1823.0], [244.0, 916.0], [247.0, 3604.3333333333335], [240.0, 3037.0], [248.0, 15.666666666666666], [253.0, 772.75], [254.0, 3029.6666666666665], [250.0, 3054.0], [249.0, 3602.5], [270.0, 13.0], [259.0, 14.5], [257.0, 15.0], [258.0, 3039.75], [264.0, 14.0], [262.0, 13.0], [263.0, 3048.6], [266.0, 65.25], [265.0, 3028.0], [268.0, 1629.8333333333333], [271.0, 13.5], [269.0, 12.0], [275.0, 12.0], [273.0, 12.0], [274.0, 12.75], [272.0, 950.8571428571428], [279.0, 3241.0], [277.0, 1805.3333333333333], [281.0, 13.333333333333334], [280.0, 3058.0], [278.0, 15.0], [285.0, 15.666666666666666], [284.0, 3054.0], [287.0, 3053.3333333333335], [302.0, 1043.6666666666665], [290.0, 2286.5], [289.0, 14.0], [294.0, 3047.0], [297.0, 14.666666666666666], [300.0, 48.333333333333336], [299.0, 115.0], [298.0, 1382.6666666666667], [303.0, 13.5], [301.0, 11.666666666666666], [307.0, 81.33333333333333], [305.0, 2292.5], [306.0, 12.0], [310.0, 1904.0], [309.0, 79.5], [312.0, 73.5], [313.0, 12.8], [319.0, 13.0], [317.0, 215.0], [311.0, 13.0], [314.0, 80.66666666666667], [315.0, 3030.2], [323.0, 1153.3333333333333], [320.0, 1604.1], [324.0, 23.15], [322.0, 1526.5], [325.0, 779.5555555555555], [328.0, 1805.6666666666667], [326.0, 54.2], [327.0, 10.666666666666666], [330.0, 46.5], [329.0, 871.25], [331.0, 10.5], [332.0, 2297.5], [335.0, 1878.4], [334.0, 219.5], [349.0, 14.0], [343.0, 2286.25], [340.0, 1803.9999999999998], [338.0, 217.0], [336.0, 3045.0], [344.0, 12.5], [350.0, 12.666666666666668], [345.0, 219.0], [342.0, 13.0], [341.0, 13.0], [348.0, 79.66666666666666], [347.0, 1526.5], [346.0, 14.0], [352.0, 2540.0], [354.0, 878.0], [356.0, 213.5], [359.0, 14.0], [362.0, 14.5], [367.0, 15.0], [366.0, 3040.3333333333335], [355.0, 2705.0], [363.0, 3593.6666666666665], [360.0, 2836.8], [368.0, 15.0], [376.0, 1928.125], [373.0, 16.0], [372.0, 15.0], [382.0, 3041.0], [381.0, 3026.0], [380.0, 3037.75], [371.0, 3038.0], [397.0, 1090.3333333333333], [387.0, 222.33333333333334], [385.0, 2510.25], [393.0, 14.5], [396.0, 115.25], [394.0, 13.4], [395.0, 2721.5], [391.0, 14.0], [392.0, 12.0], [398.0, 13.0], [390.0, 2751.1666666666665], [401.0, 214.66666666666666], [405.0, 14.0], [408.0, 14.333333333333334], [407.0, 1958.0], [400.0, 3257.0], [414.0, 878.7142857142858], [412.0, 659.0], [411.0, 2604.0], [415.0, 13.571428571428571], [404.0, 3252.25], [419.0, 15.0], [417.0, 1028.3333333333335], [418.0, 3047.6666666666665], [416.0, 14.0], [421.0, 14.5], [422.0, 3050.5], [424.0, 14.0], [427.0, 12.666666666666666], [425.0, 3044.0], [431.0, 837.0], [429.0, 11.5], [428.0, 3040.6666666666665], [430.0, 3037.0], [433.0, 10.4], [435.0, 11.0], [432.0, 561.6666666666666], [434.0, 12.0], [438.0, 877.1428571428571], [436.0, 1742.7142857142858], [437.0, 11.0], [441.0, 12.2], [443.0, 1742.0], [442.0, 11.25], [440.0, 52.6], [444.0, 10.5], [445.0, 11.0], [447.0, 9.333333333333334], [439.0, 444.1428571428571], [450.0, 2102.3333333333335], [452.0, 619.9], [455.0, 112.5], [454.0, 11.0], [449.0, 10.0], [448.0, 3051.8], [462.0, 863.2727272727274], [459.0, 1840.6], [463.0, 16.0], [456.0, 3061.0], [478.0, 219.0], [465.0, 15.25], [464.0, 69.45454545454545], [466.0, 1585.875], [477.0, 3057.5], [468.0, 13.0], [470.0, 3057.0], [472.0, 12.5], [471.0, 1531.5], [473.0, 13.0], [475.0, 1750.4285714285713], [479.0, 308.00000000000006], [483.0, 12.0], [481.0, 12.0], [480.0, 553.1666666666667], [482.0, 1023.3333333333335], [485.0, 12.5], [486.0, 3028.0], [489.0, 81.0], [487.0, 214.0], [491.0, 1903.25], [490.0, 320.5], [488.0, 216.0], [495.0, 179.0], [492.0, 1734.5], [494.0, 3234.0], [497.0, 63.74999999999999], [502.0, 1627.5], [498.0, 14.4], [499.0, 3047.3333333333335], [501.0, 217.0], [500.0, 220.33333333333331], [496.0, 2033.0], [503.0, 13.0], [508.0, 11.0], [507.0, 2177.0], [506.0, 10.0], [505.0, 14.0], [511.0, 969.0], [509.0, 662.1], [510.0, 14.0], [518.0, 3034.0], [514.0, 768.75], [538.0, 1362.3333333333333], [540.0, 2030.3333333333333], [528.0, 3852.0], [512.0, 3055.0], [520.0, 3034.5], [524.0, 924.25], [526.0, 4351.5], [534.0, 14.0], [546.0, 2537.5], [544.0, 84.83333333333333], [556.0, 59.33333333333332], [558.0, 14.5], [548.0, 15.666666666666666], [550.0, 109.61538461538461], [566.0, 620.0], [564.0, 13.666666666666666], [560.0, 1087.3333333333335], [574.0, 179.8], [572.0, 13.0], [568.0, 1836.8], [570.0, 13.0], [552.0, 115.74999999999999], [582.0, 321.0], [576.0, 118.49999999999999], [590.0, 847.75], [578.0, 1240.6], [592.0, 116.83333333333334], [604.0, 1569.4545454545455], [606.0, 53.8], [602.0, 32.400000000000006], [600.0, 12.25], [594.0, 1086.6666666666665], [596.0, 13.0], [598.0, 2029.1666666666667], [580.0, 53.4], [584.0, 13.0], [586.0, 4243.0], [612.0, 1092.3333333333335], [608.0, 10.666666666666666], [622.0, 11.0], [610.0, 216.0], [624.0, 12.333333333333334], [638.0, 13.142857142857142], [636.0, 13.25], [634.0, 12.666666666666666], [628.0, 3042.0], [630.0, 11.0], [614.0, 4391.0], [620.0, 1116.6363636363635], [618.0, 13.125], [616.0, 2285.0], [640.0, 552.6666666666666], [644.0, 3046.0], [650.0, 4446.333333333333], [656.0, 169.5], [670.0, 16.0], [666.0, 1117.4444444444443], [668.0, 2052.6666666666665], [660.0, 16.0], [662.0, 16.0], [678.0, 418.3333333333333], [674.0, 288.0], [686.0, 2694.0], [676.0, 1700.6666666666665], [680.0, 1058.0], [696.0, 14.0], [700.0, 372.57142857142856], [702.0, 165.25], [698.0, 166.25], [688.0, 435.0], [694.0, 191.85714285714286], [692.0, 216.0], [682.0, 169.66666666666663], [684.0, 1636.75], [730.0, 3768.5], [706.0, 2395.125], [708.0, 15.75], [704.0, 14.0], [712.0, 128.28571428571428], [714.0, 944.6666666666666], [720.0, 150.66666666666669], [722.0, 432.5], [724.0, 3903.0], [726.0, 3249.5], [710.0, 212.0], [764.0, 1226.0], [738.0, 16.666666666666668], [760.0, 3048.0], [762.0, 80.66666666666667], [766.0, 849.75], [754.0, 1089.0], [756.0, 15.0], [758.0, 14.5], [752.0, 14.0], [740.0, 1981.75], [744.0, 2849.5], [746.0, 17.8], [748.0, 2749.5], [750.0, 12.75], [794.0, 2135.875], [772.0, 17.0], [770.0, 15.666666666666666], [792.0, 13.5], [796.0, 213.0], [786.0, 4770.0], [788.0, 2737.0], [790.0, 13.8], [784.0, 925.3333333333334], [776.0, 15.0], [778.0, 1722.2222222222222], [780.0, 15.0], [782.0, 587.3333333333334], [768.0, 1236.0], [806.0, 2442.5], [814.0, 15.5], [800.0, 216.0], [804.0, 2334.6], [824.0, 1038.0], [826.0, 72.71428571428571], [828.0, 264.5238095238095], [830.0, 122.26666666666668], [810.0, 16.0], [808.0, 1036.0], [812.0, 16.0], [816.0, 189.16666666666666], [820.0, 15.333333333333334], [818.0, 2817.6666666666665], [836.0, 279.875], [834.0, 74.71428571428572], [832.0, 77.87500000000003], [842.0, 514.0833333333334], [844.0, 726.6666666666667], [846.0, 687.4], [838.0, 278.5], [858.0, 1685.0], [848.0, 191.0], [862.0, 219.0], [860.0, 218.0], [854.0, 221.0], [850.0, 1229.6], [840.0, 155.5625], [892.0, 63.75], [888.0, 31.818181818181824], [866.0, 646.8888888888889], [864.0, 15.5], [880.0, 1416.0], [894.0, 358.695652173913], [890.0, 296.3], [882.0, 36.666666666666664], [886.0, 12.75], [884.0, 1636.6999999999998], [870.0, 182.83333333333331], [868.0, 11.0], [872.0, 11.5], [878.0, 73.57142857142857], [922.0, 686.1666666666666], [902.0, 829.0], [898.0, 10.411764705882351], [900.0, 78.66666666666666], [896.0, 148.61904761904762], [904.0, 749.0], [912.0, 1239.5], [924.0, 777.25], [926.0, 14.2], [920.0, 420.5], [916.0, 417.3333333333333], [918.0, 2042.5], [914.0, 10.5], [908.0, 1874.3333333333333], [910.0, 13.5], [956.0, 14.25], [942.0, 60.92307692307692], [932.0, 1969.5], [954.0, 3256.75], [944.0, 149.0], [946.0, 12.5], [948.0, 13.0], [950.0, 1035.625], [936.0, 926.5454545454546], [938.0, 220.7142857142857], [940.0, 117.0], [928.0, 1027.25], [984.0, 217.0], [962.0, 1627.0], [960.0, 1939.0], [974.0, 12.666666666666666], [972.0, 518.75], [976.0, 908.3333333333334], [978.0, 11.5], [980.0, 976.75], [982.0, 3038.0], [964.0, 1528.5], [968.0, 538.7777777777778], [970.0, 236.7], [966.0, 1529.0], [996.0, 215.0], [1004.0, 14.333333333333334], [992.0, 1019.3999999999999], [1000.0, 218.33333333333334], [1002.0, 656.0], [1016.0, 11.666666666666666], [1008.0, 12.0], [1022.0, 678.9230769230769], [1020.0, 44.14285714285714], [1018.0, 551.0], [1012.0, 584.8333333333334], [1014.0, 517.25], [1010.0, 418.0], [1006.0, 594.8571428571428], [1032.0, 1308.4], [1052.0, 1503.0], [1048.0, 430.0], [1044.0, 783.8888888888889], [1040.0, 45.83333333333333], [1028.0, 2027.0], [1036.0, 13.0], [1080.0, 12.0], [1084.0, 570.375], [1076.0, 13.0], [1060.0, 523.0], [1064.0, 1955.0], [1100.0, 14.571428571428571], [1088.0, 514.75], [1116.0, 352.66666666666663], [1112.0, 222.66666666666666], [1108.0, 1977.6], [1092.0, 15.0], [1124.0, 13.0], [1128.0, 12.0], [1132.0, 319.0], [1120.0, 11.5], [1148.0, 616.9090909090909], [1144.0, 141.81818181818184], [1140.0, 219.14285714285717], [1136.0, 80.86666666666667], [1104.0, 525.375], [1160.0, 2252.5], [1164.0, 548.5], [1180.0, 265.63414634146346], [1152.0, 54.0], [1156.0, 11.5], [1204.0, 141.6315789473684], [1208.0, 703.3684210526316], [1212.0, 254.74999999999997], [1200.0, 385.9565217391305], [1184.0, 383.0714285714286], [1188.0, 484.7419354838709], [1192.0, 265.82758620689657], [1196.0, 500.25], [1168.0, 437.75000000000006], [1172.0, 209.99999999999997], [1176.0, 327.7857142857142], [1228.0, 53.0], [1216.0, 788.5], [1236.0, 253.6333333333333], [1232.0, 232.5], [1220.0, 967.6666666666667], [1264.0, 423.3333333333333], [1268.0, 346.7142857142857], [1248.0, 432.99999999999994], [1276.0, 877.0], [1272.0, 65.5], [1244.0, 463.66666666666646], [1240.0, 226.08695652173915], [1252.0, 266.0384615384616], [1256.0, 154.91666666666669], [1260.0, 653.6666666666667], [1328.0, 118.5], [1280.0, 13.6], [1296.0, 15.0], [1304.0, 115.5], [1312.0, 1316.3333333333335], [1340.0, 1751.7142857142858], [1336.0, 12.0], [1332.0, 601.6923076923077], [1316.0, 189.28571428571428], [1320.0, 13.5], [1324.0, 429.0], [1392.0, 709.7272727272727], [1344.0, 14.666666666666666], [1348.0, 480.2777777777778], [1352.0, 355.5], [1376.0, 856.6666666666666], [1400.0, 78.66666666666666], [1396.0, 73.7], [1356.0, 442.1111111111111], [1380.0, 588.2857142857143], [1388.0, 359.57142857142856], [1384.0, 105.0909090909091], [1360.0, 578.0], [1372.0, 786.5714285714286], [1368.0, 484.16666666666663], [1364.0, 7.5], [1468.0, 412.875], [1456.0, 1028.5], [1428.0, 1914.3333333333333], [1440.0, 2249.0], [1524.0, 1798.0], [1520.0, 1009.0], [1532.0, 1030.0], [1508.0, 1332.3333333333333], [1504.0, 1698.25], [1516.0, 1026.0], [1528.0, 3055.5], [1484.0, 280.4], [1480.0, 234.66666666666669], [1472.0, 140.66666666666666], [1492.0, 309.7142857142857], [1476.0, 176.4], [1488.0, 56.00000000000001], [1588.0, 506.2307692307692], [1572.0, 180.25], [1596.0, 706.7142857142857], [1592.0, 170.375], [1568.0, 422.125], [1576.0, 326.1428571428571], [1584.0, 533.2173913043478], [1536.0, 1022.75], [1548.0, 759.0], [1544.0, 1018.0], [1540.0, 1022.25], [1564.0, 1965.8571428571427], [1560.0, 1560.2], [1552.0, 912.5], [1580.0, 130.24324324324323], [1608.0, 1028.5], [1616.0, 746.5], [1612.0, 42.333333333333336], [1648.0, 1884.0], [1656.0, 1815.6666666666667], [1652.0, 1793.0], [1600.0, 559.2], [1624.0, 1020.0], [1604.0, 1313.8], [1644.0, 2041.0], [1676.0, 640.75], [1712.0, 927.75], [1692.0, 52.5], [1716.0, 733.3333333333334], [1720.0, 270.0], [1724.0, 572.8571428571429], [1684.0, 10.5], [1688.0, 1423.8], [1672.0, 213.0], [1700.0, 771.5], [1704.0, 321.5], [1708.0, 419.0], [1736.0, 453.0], [1728.0, 14.0], [1748.0, 14.666666666666666], [1744.0, 14.0], [1740.0, 234.5], [1732.0, 628.0], [1780.0, 1982.5000000000002], [1788.0, 255.33333333333331], [1760.0, 415.0], [1764.0, 327.5], [1772.0, 322.0], [1784.0, 1038.0], [1840.0, 1145.75], [1792.0, 520.7777777777778], [1820.0, 37.87500000000001], [1796.0, 135.0], [1824.0, 321.5], [1852.0, 13.75], [1844.0, 56.6], [1848.0, 114.5], [1828.0, 12.6], [1800.0, 408.70588235294116], [1804.0, 817.1578947368421], [1816.0, 772.75], [1812.0, 221.0], [1860.0, 13.666666666666666], [1856.0, 295.66666666666663], [1884.0, 132.14285714285714], [1876.0, 569.2222222222222], [1880.0, 538.5384615384615], [1864.0, 137.42857142857142], [1904.0, 247.0], [1908.0, 70.21428571428572], [1912.0, 802.478260869565], [1916.0, 846.625], [1888.0, 259.22222222222223], [1892.0, 621.5], [1896.0, 11.0], [1900.0, 678.4444444444445], [1868.0, 552.5833333333333], [1872.0, 584.0000000000001], [1924.0, 257.8], [1928.0, 12.7], [1920.0, 808.1666666666667], [1948.0, 420.7894736842105], [1956.0, 542.8888888888889], [1960.0, 9.0], [1952.0, 11.25], [1932.0, 1107.4], [1936.0, 480.0], [1940.0, 439.2666666666667], [1944.0, 545.5294117647059], [1033.0, 14.5], [1049.0, 712.3529411764706], [1053.0, 2293.6666666666665], [1045.0, 13.666666666666666], [1041.0, 94.0], [1029.0, 537.5], [1085.0, 379.0], [1073.0, 14.0], [1057.0, 1580.7], [1061.0, 983.6249999999999], [1069.0, 1951.0], [1065.0, 11.0], [1037.0, 12.0], [1149.0, 309.83333333333337], [1113.0, 1441.375], [1109.0, 431.5], [1121.0, 1935.0], [1125.0, 1037.5], [1129.0, 50.400000000000006], [1133.0, 105.0909090909091], [1145.0, 726.2222222222222], [1141.0, 114.66666666666667], [1137.0, 102.75], [1101.0, 49.5], [1105.0, 12.0], [1165.0, 685.5], [1181.0, 168.75555555555556], [1153.0, 334.25], [1161.0, 13.0], [1169.0, 665.4], [1201.0, 329.72727272727275], [1213.0, 715.2727272727273], [1209.0, 262.55555555555554], [1205.0, 343.2173913043478], [1185.0, 336.5641025641025], [1189.0, 700.3142857142857], [1193.0, 182.28571428571433], [1197.0, 278.0], [1177.0, 303.74285714285713], [1173.0, 411.3333333333333], [1217.0, 310.1428571428571], [1233.0, 104.12499999999999], [1265.0, 581.3333333333333], [1269.0, 1432.8333333333333], [1277.0, 428.3333333333333], [1273.0, 720.0], [1229.0, 1074.0], [1221.0, 759.0], [1237.0, 488.06249999999994], [1241.0, 199.9090909090909], [1245.0, 574.4166666666666], [1253.0, 403.55], [1257.0, 394.54999999999995], [1261.0, 704.75], [1249.0, 170.3571428571429], [1289.0, 867.0], [1281.0, 750.8571428571429], [1309.0, 15.0], [1285.0, 1442.6], [1293.0, 1029.3333333333333], [1317.0, 1040.8], [1325.0, 348.33333333333337], [1321.0, 848.0], [1313.0, 1966.5], [1341.0, 12.0], [1333.0, 490.66666666666663], [1301.0, 461.3333333333333], [1305.0, 688.6666666666667], [1353.0, 896.0833333333333], [1345.0, 75.8], [1373.0, 705.2], [1349.0, 152.92307692307693], [1357.0, 634.0666666666668], [1393.0, 177.45454545454547], [1397.0, 187.14285714285714], [1401.0, 11.0], [1377.0, 443.2857142857143], [1381.0, 62.75], [1389.0, 1328.5], [1385.0, 180.0909090909091], [1361.0, 144.83333333333334], [1365.0, 1290.0], [1465.0, 225.0], [1469.0, 129.5], [1461.0, 1113.0], [1413.0, 2263.5], [1409.0, 2030.0], [1453.0, 1030.0], [1425.0, 1911.3333333333335], [1477.0, 647.6666666666665], [1473.0, 1196.8], [1481.0, 632.4285714285714], [1489.0, 490.0], [1533.0, 1093.0], [1513.0, 1025.0], [1509.0, 1038.0], [1485.0, 352.66666666666663], [1493.0, 684.0000000000001], [1585.0, 437.8125], [1593.0, 98.24999999999999], [1589.0, 449.90000000000003], [1597.0, 535.0], [1569.0, 156.16666666666666], [1549.0, 58.75], [1545.0, 1013.0], [1541.0, 66.0], [1537.0, 1090.0], [1565.0, 315.5], [1561.0, 551.6], [1557.0, 1241.8], [1553.0, 854.0], [1581.0, 395.12195121951214], [1577.0, 338.65000000000003], [1573.0, 325.88000000000005], [1609.0, 131.25], [1629.0, 275.25], [1625.0, 3419.0], [1613.0, 900.6], [1605.0, 443.0], [1601.0, 156.0], [1653.0, 1681.0], [1641.0, 1532.5], [1637.0, 752.75], [1633.0, 1704.5], [1673.0, 249.0], [1677.0, 437.25], [1669.0, 556.6666666666667], [1681.0, 11.666666666666666], [1685.0, 10.75], [1693.0, 62.0], [1689.0, 13.6], [1697.0, 12.6], [1725.0, 250.125], [1721.0, 12.0], [1717.0, 451.2857142857143], [1713.0, 953.5714285714286], [1701.0, 676.0], [1705.0, 9.5], [1709.0, 997.1428571428571], [1737.0, 3040.5], [1745.0, 14.0], [1741.0, 2041.75], [1729.0, 225.0], [1785.0, 725.4], [1789.0, 406.0], [1769.0, 325.5], [1781.0, 1211.1666666666665], [1797.0, 570.1875], [1793.0, 583.2], [1821.0, 953.0], [1817.0, 518.1333333333334], [1801.0, 589.3333333333334], [1805.0, 893.5555555555557], [1825.0, 525.1666666666667], [1849.0, 39.875], [1853.0, 12.0], [1845.0, 390.95000000000005], [1841.0, 243.8888888888889], [1829.0, 220.0], [1833.0, 11.5], [1837.0, 13.0], [1813.0, 11.8], [1809.0, 1575.8333333333335], [1905.0, 149.25], [1865.0, 362.59999999999997], [1857.0, 825.75], [1885.0, 47.66666666666667], [1881.0, 1184.8666666666668], [1877.0, 502.9375], [1909.0, 219.0], [1913.0, 445.1176470588235], [1917.0, 710.4999999999999], [1893.0, 13.5], [1901.0, 230.45454545454544], [1897.0, 554.0], [1889.0, 948.0], [1869.0, 291.4285714285714], [1873.0, 160.58823529411765], [1861.0, 708.0], [1925.0, 883.8], [1929.0, 10.5], [1921.0, 1973.5], [1949.0, 51.79999999999999], [1953.0, 571.1666666666666], [1957.0, 9.0], [1933.0, 934.9166666666666], [1941.0, 827.2], [1937.0, 526.375], [1945.0, 588.5833333333333], [517.0, 1019.1666666666667], [515.0, 1688.0], [541.0, 582.5555555555555], [539.0, 14.0], [543.0, 55.0], [529.0, 3052.0], [513.0, 1628.0], [523.0, 1875.6], [527.0, 115.25], [525.0, 420.0], [533.0, 2036.5], [547.0, 14.5], [551.0, 1091.0], [545.0, 118.375], [559.0, 2039.8333333333335], [555.0, 3045.75], [557.0, 14.0], [563.0, 1525.8333333333333], [567.0, 14.5], [565.0, 1091.6666666666665], [575.0, 83.83333333333333], [573.0, 2537.0], [569.0, 13.666666666666666], [571.0, 104.28571428571429], [549.0, 1401.0], [553.0, 13.333333333333334], [607.0, 885.3333333333334], [577.0, 823.75], [603.0, 78.33333333333333], [605.0, 63.0], [601.0, 13.0], [593.0, 1316.8333333333333], [595.0, 13.0], [597.0, 12.333333333333334], [599.0, 658.4], [579.0, 62.25], [581.0, 1130.3333333333333], [589.0, 1537.5], [615.0, 35.55555555555556], [609.0, 1022.7777777777778], [623.0, 1526.6666666666667], [621.0, 12.0], [611.0, 3360.0], [639.0, 772.0], [637.0, 1747.8571428571427], [633.0, 1745.4285714285716], [627.0, 1745.857142857143], [629.0, 3051.0], [625.0, 11.5], [613.0, 14.0], [619.0, 12.0], [617.0, 12.5], [665.0, 4978.0], [647.0, 2277.5], [641.0, 11.666666666666666], [643.0, 1530.6666666666665], [649.0, 13.0], [653.0, 4231.666666666667], [657.0, 1726.6666666666667], [671.0, 3910.0], [669.0, 14.333333333333334], [667.0, 318.0], [655.0, 13.0], [661.0, 2188.6666666666665], [659.0, 15.5], [679.0, 11.0], [673.0, 12.0], [687.0, 2681.0], [677.0, 12.0], [697.0, 3057.0], [699.0, 1049.5], [701.0, 1173.8], [703.0, 12.0], [695.0, 3203.0], [693.0, 1313.142857142857], [689.0, 4318.0], [681.0, 14.0], [685.0, 924.2307692307693], [683.0, 115.0], [707.0, 82.66666666666667], [705.0, 72.28571428571429], [709.0, 246.71428571428572], [715.0, 9.6], [717.0, 1134.0], [719.0, 215.66666666666669], [711.0, 1961.8750000000002], [735.0, 3162.8], [721.0, 3908.0], [725.0, 13.0], [723.0, 14.0], [765.0, 15.333333333333334], [761.0, 13.0], [741.0, 18.0], [763.0, 1397.142857142857], [767.0, 3254.0], [753.0, 838.6666666666666], [757.0, 1154.75], [759.0, 16.0], [755.0, 115.0], [739.0, 17.0], [745.0, 16.0], [747.0, 18.0], [749.0, 223.5], [751.0, 2742.6666666666665], [775.0, 49.166666666666664], [773.0, 2179.0], [769.0, 16.0], [771.0, 16.5], [795.0, 290.6666666666667], [799.0, 3704.5], [797.0, 3244.0], [793.0, 186.66666666666666], [785.0, 221.24999999999997], [789.0, 873.5], [787.0, 1382.25], [783.0, 3044.25], [781.0, 221.0], [779.0, 66.0], [807.0, 1433.6666666666667], [815.0, 1029.5], [825.0, 450.1428571428571], [829.0, 132.33333333333334], [827.0, 116.14285714285715], [831.0, 320.3], [805.0, 16.0], [809.0, 15.0], [811.0, 1029.3333333333333], [823.0, 13.0], [821.0, 2329.0], [813.0, 424.0], [839.0, 13.714285714285714], [833.0, 443.55555555555554], [835.0, 142.125], [847.0, 13.8], [843.0, 116.71428571428572], [845.0, 325.8333333333333], [859.0, 322.25], [863.0, 997.8], [849.0, 81.0], [853.0, 116.25], [855.0, 2230.8], [851.0, 71.625], [837.0, 105.38461538461539], [841.0, 49.6], [895.0, 95.36363636363636], [871.0, 81.0], [889.0, 1294.4], [881.0, 34.900000000000006], [891.0, 268.25], [893.0, 144.07142857142858], [885.0, 114.5], [887.0, 182.5], [883.0, 152.16666666666666], [873.0, 12.0], [869.0, 1905.6666666666665], [879.0, 73.14285714285714], [877.0, 15.0], [875.0, 1040.0], [899.0, 58.69230769230769], [897.0, 257.07142857142856], [901.0, 1409.0], [913.0, 114.5], [927.0, 14.0], [925.0, 78.83333333333331], [921.0, 12.6], [915.0, 959.8333333333334], [919.0, 13.333333333333334], [907.0, 219.5], [911.0, 216.5], [905.0, 435.0], [957.0, 909.8], [929.0, 14.0], [935.0, 248.9230769230769], [955.0, 3255.0], [947.0, 13.0], [951.0, 13.0], [949.0, 11.666666666666666], [945.0, 1134.375], [933.0, 114.0], [937.0, 149.0], [941.0, 657.7142857142858], [939.0, 618.1], [943.0, 297.2], [985.0, 2366.6666666666665], [967.0, 363.8571428571429], [961.0, 15.5], [973.0, 81.66666666666667], [989.0, 2533.0], [987.0, 157.0], [979.0, 220.66666666666669], [981.0, 3038.0], [983.0, 218.0], [977.0, 11.333333333333334], [965.0, 177.6], [963.0, 13.0], [969.0, 12.333333333333334], [971.0, 319.0], [999.0, 917.4], [997.0, 58.2], [995.0, 3252.0], [993.0, 3437.0], [1003.0, 18.0], [1001.0, 217.0], [1023.0, 14.333333333333334], [1021.0, 15.6], [1019.0, 13.166666666666666], [1017.0, 1608.6666666666667], [1009.0, 588.0], [1015.0, 1054.0], [1013.0, 12.0], [1011.0, 12.5], [1005.0, 13.75], [1007.0, 14.0], [1030.0, 1196.75], [1026.0, 875.2857142857143], [1054.0, 888.0], [1050.0, 654.25], [1046.0, 12.0], [1042.0, 42.0], [1074.0, 1284.375], [1078.0, 13.666666666666666], [1086.0, 135.5], [1082.0, 1807.5], [1058.0, 116.0], [1070.0, 12.0], [1066.0, 2288.6666666666665], [1034.0, 2159.0], [1094.0, 1481.6], [1118.0, 12.0], [1110.0, 14.0], [1090.0, 782.0], [1126.0, 12.666666666666666], [1130.0, 711.8888888888889], [1134.0, 217.53846153846152], [1146.0, 136.8], [1150.0, 456.06666666666666], [1138.0, 118.25], [1142.0, 530.2142857142857], [1102.0, 271.5], [1166.0, 569.2857142857143], [1154.0, 866.6666666666667], [1182.0, 568.7241379310345], [1158.0, 3247.25], [1202.0, 123.30769230769232], [1206.0, 420.26666666666677], [1210.0, 439.38461538461536], [1214.0, 69.27272727272728], [1186.0, 362.6341463414634], [1198.0, 13.0], [1194.0, 190.56250000000003], [1190.0, 308.48], [1170.0, 364.2727272727273], [1174.0, 370.5714285714286], [1178.0, 283.3478260869566], [1226.0, 804.0769230769231], [1242.0, 457.5087719298246], [1238.0, 443.2954545454546], [1234.0, 511.6923076923076], [1230.0, 17.0], [1222.0, 611.6666666666666], [1218.0, 824.2], [1266.0, 62.50000000000001], [1270.0, 14.0], [1274.0, 59.666666666666664], [1246.0, 230.61904761904762], [1254.0, 518.3076923076924], [1258.0, 377.6666666666667], [1262.0, 393.6], [1250.0, 128.03125], [1282.0, 15.0], [1310.0, 2191.3333333333335], [1286.0, 633.0], [1290.0, 1701.3333333333333], [1294.0, 16.0], [1298.0, 1028.8], [1302.0, 513.5], [1306.0, 14.0], [1334.0, 825.0], [1338.0, 14.0], [1330.0, 1741.0], [1318.0, 13.75], [1326.0, 1154.5], [1322.0, 14.0], [1314.0, 934.4], [1394.0, 12.5], [1354.0, 532.1538461538462], [1346.0, 80.83333333333333], [1350.0, 383.77272727272725], [1402.0, 1169.2857142857142], [1358.0, 664.8], [1398.0, 737.6428571428572], [1378.0, 224.0], [1382.0, 36.35294117647059], [1386.0, 594.0909090909092], [1390.0, 393.42857142857144], [1362.0, 258.1111111111111], [1374.0, 441.78571428571433], [1370.0, 2386.3333333333335], [1422.0, 3259.0], [1466.0, 393.00000000000006], [1470.0, 667.8571428571429], [1458.0, 1013.5], [1418.0, 3264.5], [1414.0, 1257.0], [1410.0, 851.0], [1438.0, 2243.0], [1434.0, 699.6666666666666], [1450.0, 1030.25], [1446.0, 1033.25], [1442.0, 415.5], [1486.0, 25.8], [1478.0, 683.4166666666666], [1522.0, 1256.5], [1526.0, 3232.5], [1518.0, 1020.6666666666666], [1498.0, 2054.5], [1494.0, 161.28571428571428], [1474.0, 13.25], [1482.0, 13.0], [1490.0, 100.4], [1594.0, 322.0], [1590.0, 1297.5714285714287], [1598.0, 174.33333333333331], [1570.0, 1038.6666666666667], [1586.0, 359.43749999999994], [1582.0, 709.142857142857], [1574.0, 248.72222222222229], [1566.0, 650.4285714285713], [1550.0, 819.0], [1538.0, 582.0], [1558.0, 1154.6666666666667], [1554.0, 1702.0], [1562.0, 1034.75], [1578.0, 174.52631578947373], [1606.0, 519.8], [1618.0, 459.6666666666667], [1650.0, 1680.0], [1622.0, 1534.25], [1602.0, 14.0], [1662.0, 221.0], [1658.0, 432.0], [1678.0, 32.666666666666664], [1674.0, 356.6], [1722.0, 355.0], [1726.0, 12.6], [1698.0, 1715.0], [1718.0, 11.833333333333334], [1682.0, 14.666666666666666], [1686.0, 10.0], [1690.0, 2029.5], [1694.0, 13.0], [1670.0, 215.0], [1666.0, 217.75], [1706.0, 491.0], [1710.0, 2140.0], [1702.0, 9.0], [1734.0, 1330.0], [1758.0, 414.5], [1754.0, 1428.0], [1750.0, 3034.0], [1746.0, 2037.75], [1782.0, 1096.875], [1786.0, 183.33333333333331], [1790.0, 51.39999999999999], [1762.0, 417.0], [1766.0, 325.5], [1770.0, 214.0], [1798.0, 185.0], [1822.0, 273.9230769230769], [1818.0, 1054.6999999999998], [1794.0, 353.7777777777777], [1806.0, 248.18749999999997], [1854.0, 558.0], [1842.0, 103.71428571428571], [1846.0, 152.66666666666666], [1850.0, 294.875], [1830.0, 335.8571428571429], [1838.0, 10.0], [1826.0, 1711.6666666666665], [1802.0, 189.42857142857144], [1814.0, 762.2666666666667], [1810.0, 763.0], [1866.0, 595.7619047619047], [1862.0, 93.2], [1858.0, 764.3333333333333], [1886.0, 666.1], [1882.0, 55.6], [1878.0, 742.0999999999999], [1870.0, 242.87500000000003], [1906.0, 136.0], [1914.0, 546.5], [1918.0, 14.0], [1910.0, 197.1], [1890.0, 729.6666666666666], [1894.0, 12.0], [1898.0, 215.45454545454544], [1902.0, 489.85714285714283], [1874.0, 492.8260869565218], [1922.0, 774.0833333333334], [1926.0, 424.28571428571433], [1950.0, 362.13333333333327], [1946.0, 474.6], [1934.0, 661.9166666666665], [1958.0, 9.0], [1954.0, 905.6000000000001], [1930.0, 619.0], [1938.0, 885.5714285714287], [1942.0, 375.9333333333333], [1031.0, 15.0], [1051.0, 303.66666666666663], [1047.0, 11.333333333333334], [1043.0, 14.5], [1035.0, 217.4], [1039.0, 1365.5], [1075.0, 13.25], [1087.0, 1025.6666666666667], [1083.0, 114.0], [1079.0, 2711.3333333333335], [1059.0, 366.8], [1067.0, 11.0], [1099.0, 1007.1666666666666], [1147.0, 59.44444444444444], [1119.0, 2396.25], [1115.0, 2889.0], [1111.0, 115.25], [1107.0, 12.0], [1103.0, 40.875], [1123.0, 318.125], [1127.0, 8.0], [1135.0, 334.8571428571429], [1131.0, 487.83333333333337], [1151.0, 28.07692307692308], [1143.0, 215.66666666666666], [1139.0, 3212.25], [1167.0, 386.5], [1159.0, 13.0], [1183.0, 515.5], [1163.0, 1799.5], [1203.0, 724.3548387096776], [1207.0, 511.6874999999999], [1211.0, 645.9285714285714], [1215.0, 355.4545454545455], [1191.0, 312.76923076923083], [1195.0, 81.06666666666665], [1199.0, 307.2333333333334], [1187.0, 228.95000000000002], [1171.0, 289.46153846153845], [1179.0, 291.975], [1175.0, 403.875], [1219.0, 323.57142857142856], [1239.0, 369.41935483870975], [1235.0, 512.0645161290323], [1231.0, 65.0], [1267.0, 427.8888888888889], [1271.0, 13.0], [1275.0, 421.0], [1247.0, 155.19230769230765], [1227.0, 1808.0], [1243.0, 158.4358974358974], [1251.0, 239.1818181818182], [1255.0, 210.95238095238096], [1259.0, 229.875], [1263.0, 1007.7500000000001], [1291.0, 223.0], [1295.0, 14.5], [1283.0, 55.6], [1307.0, 1012.6], [1287.0, 3036.0], [1315.0, 343.0], [1319.0, 600.5], [1323.0, 1437.2857142857142], [1327.0, 2247.75], [1343.0, 1404.142857142857], [1335.0, 1354.5], [1331.0, 1403.142857142857], [1299.0, 573.3333333333333], [1303.0, 356.66666666666663], [1355.0, 553.5555555555555], [1347.0, 185.76923076923077], [1375.0, 1020.0], [1351.0, 457.5625], [1359.0, 417.0], [1395.0, 114.16666666666667], [1399.0, 128.71428571428572], [1407.0, 1015.6], [1379.0, 246.83333333333331], [1391.0, 12.142857142857142], [1383.0, 317.0], [1387.0, 219.125], [1363.0, 194.0], [1367.0, 644.9999999999999], [1371.0, 17.0], [1467.0, 652.7500000000001], [1463.0, 965.6666666666666], [1471.0, 24.714285714285715], [1411.0, 3265.0], [1455.0, 1011.0], [1431.0, 1912.3333333333335], [1479.0, 213.0], [1475.0, 933.625], [1483.0, 742.2857142857142], [1487.0, 317.25], [1491.0, 431.94999999999993], [1495.0, 14.0], [1503.0, 1045.0], [1499.0, 1034.3333333333333], [1587.0, 601.4761904761906], [1595.0, 996.3333333333334], [1571.0, 376.7200000000001], [1591.0, 222.06666666666666], [1599.0, 44.0], [1543.0, 64.16666666666666], [1567.0, 386.66666666666663], [1559.0, 1967.0], [1555.0, 2123.6666666666665], [1579.0, 696.1111111111111], [1583.0, 741.1724137931034], [1575.0, 485.59090909090907], [1619.0, 43.5], [1615.0, 767.4], [1607.0, 222.50000000000003], [1603.0, 14.0], [1647.0, 1751.3333333333335], [1643.0, 1028.0], [1679.0, 482.0], [1715.0, 702.6666666666666], [1675.0, 340.2], [1683.0, 2032.0], [1687.0, 10.5], [1691.0, 14.0], [1695.0, 216.0], [1727.0, 13.0], [1723.0, 797.7142857142858], [1719.0, 1025.5], [1699.0, 13.666666666666666], [1703.0, 14.5], [1707.0, 9.666666666666666], [1711.0, 1288.6], [1739.0, 453.0], [1743.0, 268.5], [1735.0, 443.25], [1731.0, 2363.6], [1751.0, 1022.0], [1787.0, 879.3000000000001], [1791.0, 61.75], [1775.0, 491.33333333333337], [1783.0, 1383.3076923076922], [1779.0, 1433.8571428571427], [1807.0, 202.25], [1799.0, 734.75], [1823.0, 680.5714285714286], [1819.0, 269.3636363636363], [1795.0, 69.42857142857143], [1803.0, 351.0], [1855.0, 426.5], [1851.0, 13.0], [1843.0, 105.07142857142858], [1827.0, 494.0], [1835.0, 528.0], [1839.0, 372.75], [1831.0, 340.6], [1815.0, 276.25], [1811.0, 159.66666666666666], [1871.0, 567.2105263157896], [1859.0, 301.375], [1887.0, 497.75], [1883.0, 723.3636363636365], [1879.0, 962.4117647058823], [1907.0, 133.1764705882353], [1915.0, 543.5384615384615], [1919.0, 116.0], [1911.0, 615.2500000000002], [1891.0, 661.7142857142857], [1895.0, 134.0], [1899.0, 12.0], [1903.0, 317.66666666666663], [1867.0, 800.35], [1875.0, 379.05555555555554], [1863.0, 115.25], [1927.0, 1097.0], [1923.0, 221.42857142857144], [1931.0, 238.6], [1951.0, 225.3], [1947.0, 240.375], [1935.0, 538.8125], [1955.0, 422.6666666666667], [1959.0, 12.0], [1943.0, 656.8461538461538], [1939.0, 355.9333333333334]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[1142.3391999999951, 703.0496000000005]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1960.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20333.333333333332, "minX": 1.6092525E12, "maxY": 195928.5, "series": [{"data": [[1.6092525E12, 195928.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6092525E12, 20333.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6092525E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 703.0496000000005, "minX": 1.6092525E12, "maxY": 703.0496000000005, "series": [{"data": [[1.6092525E12, 703.0496000000005]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6092525E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 703.0157000000016, "minX": 1.6092525E12, "maxY": 703.0157000000016, "series": [{"data": [[1.6092525E12, 703.0157000000016]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6092525E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 496.95399999999927, "minX": 1.6092525E12, "maxY": 496.95399999999927, "series": [{"data": [[1.6092525E12, 496.95399999999927]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6092525E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.6092525E12, "maxY": 8938.0, "series": [{"data": [[1.6092525E12, 8938.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6092525E12, 3034.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6092525E12, 7160.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6092525E12, 3243.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6092525E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6092525E12, 16.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6092525E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 7.0, "maxY": 8923.0, "series": [{"data": [[2191.0, 14.0], [299.0, 3051.0], [1223.0, 13.0], [648.0, 3030.0], [1414.0, 963.0], [94.0, 6696.0], [99.0, 7180.0], [13.0, 7209.0], [1821.0, 15.0], [7.0, 8923.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2191.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 13.0, "minX": 7.0, "maxY": 8923.0, "series": [{"data": [[2191.0, 14.0], [299.0, 3051.0], [1223.0, 13.0], [648.0, 3030.0], [1414.0, 963.0], [94.0, 6696.0], [99.0, 7180.0], [13.0, 7209.0], [1821.0, 15.0], [7.0, 8923.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 2191.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6092525E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6092525E12, 166.66666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6092525E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6092525E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6092525E12, 166.66666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6092525E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6092525E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6092525E12, 166.66666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6092525E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 166.66666666666666, "minX": 1.6092525E12, "maxY": 166.66666666666666, "series": [{"data": [[1.6092525E12, 166.66666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6092525E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

